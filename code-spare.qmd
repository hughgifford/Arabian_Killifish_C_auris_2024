# Quarto Code to Reproduce Figures

```{r Load-All-Required-Packages}
# Data
require(tidyverse)
require(readxl)
require(janitor)
require(kableExtra) 

# Statistics
require(scales)
require(ggsignif)
require(growthcurver)
require(survival)
require(survminer)

# Plotting
require(ggprism)
require(ggsci)
require(ggbeeswarm)
require(ggrepel)
require(ComplexHeatmap)
require(tidyHeatmap)
require(patchwork)
require(viridis)
require(circlize)
require(scales)
require(ggnewscale)

# Phylogeny
require(ggtree)
require(TDbook)
require(treeio)
require(phangorn)
require(ggtreeExtra)

# Network
library(igraph)
library(ggraph)
library(ggplot2)
library(reshape2)

my_theme <- theme_minimal() +
  theme(text=element_text(family = "Arial",size=12,colour="black"), #
        panel.grid = element_blank(),
        axis.text= element_text(colour="black"),
        axis.line = element_line(color = "black", size = 0.5),
        plot.title = element_text(hjust = 0.5))
```

```{r Key-Functions}
# Function to extract metadata from names
# Used for Correlation Matrix Plots
# Extracts Clade, Timepoint and Replicate from a list of names
# E.g. III_24h_1
extract_metadata <- function(names) {
  data.frame(
    Clade = sapply(strsplit(names, "_"), `[`, 1),
    Timepoint = sapply(strsplit(names, "_"), `[`, 2),
    Replicate = sapply(strsplit(names, "_"), `[`, 3)
  )
}



# Function to plot volcano for AK




# Extract useful names
output_gene_descriptors <- function(df_degs_time_input,search_term){
  df_degs_time_input %>% 
  rownames_to_column(var="Unique_rowname") %>% 
  left_join(.,ak_descriptions,by="Unique_rowname") %>% 
  mutate(Search_field=paste(Description,Keywords)) %>% 
  # Can output here as below
  # Found some useful genes to annotate
  filter(grepl(search_term,Search_field)) %>% 
  #select(Locus_name) %>% table() # Several genes are repeated, I'll need to count them
  #select(Unique_rowname) %>% 
  mutate(Short_name=gsub("_.*","",Unique_rowname))
}

# Function to discover enriched gene sets
enrichment <- function(clade,comparison){
  
  ## DEG SUBSET
  # Select a subset of genes, for that comparison of clade and timepoint
  df_degs_subset <- df_degs_input %>% 
    filter(Clade==clade) %>% 
    filter(Comparison==comparison) %>% 
    select(Clade,Comparison,Locus_id,DEG,Log_FC) 
  
  # Count DEGs within this subset
  df_totals <- df_degs_subset %>% group_by(DEG) %>% summarise(Number=n()) %>% column_to_rownames(var="DEG")

  # Add zero rows if not present
  if(!"Up" %in% row.names(df_totals)) {df_totals <- rbind(df_totals, Up = c(Number = 0))}
  if(!"No" %in% row.names(df_totals)) {df_totals <- rbind(df_totals, No = c(Number = 0))}
  if(!"Down" %in% row.names(df_totals)) {df_totals <- rbind(df_totals, Down = c(Number = 0))}
  
  # Produce named variables
  total_down <- as.numeric(df_totals["Down","Number"])
  total_not <- as.numeric(df_totals["No","Number"])
  total_up <- as.numeric(df_totals["Up","Number"])
  total_deg <- total_down+total_up
  total <- total_not+total_deg
  
  ## FEATURES
  # Join with feature list - I had to swap this around.
  # Ensure genes with no features are described
  df_deg_feat <- left_join(df_degs_subset,df_features_input,by="Locus_id") %>% 
    mutate(Feature=ifelse(is.na(Feature),"No Feature",Feature)) %>% 
    distinct()
  
  # GROUP FEATURES BY DEG
  table_deg_feats <- df_deg_feat %>% 
    group_by(Feature,DEG) %>% summarise(Number=n()) %>% 
    pivot_wider(names_from = DEG,values_from = Number,values_fill = list(Number=0)) %>% 
    distinct() %>% # Just in case duplication - not an issue at the moment
    filter(Feature!="No Feature") # Remove the No Feature column
  # Add zero to columns if not present
  if(!"Up" %in% colnames(table_deg_feats)) {table_deg_feats <- table_deg_feats %>%add_column(Up = 0)}
  if(!"Down" %in% colnames(table_deg_feats)) {table_deg_feats <- table_deg_feats %>%add_column(Down = 0)}
  if(!"No" %in% colnames(table_deg_feats)) {table_deg_feats <- table_deg_feats %>%add_column(No = 0)}
  
  # Tabulate "Up" vs "Down"
  table_up <- table_deg_feats %>% #filter(Feature!="No Feature") %>% 
    filter(Up>1) %>%  # Try just looking at enrichment where >1 DEG
    mutate(DEGS_with_feature=Up,
            Non_DEGS_with_feature=No+Down,
            DEGS_without_feature=total_up-Up,
            Non_DEGS_without_feature=total_not+total_down-No-Down) %>% 
    column_to_rownames(var="Feature") %>% filter(Up!=0) %>% select(-c(No,Up,Down)) #%>% t()
  
  # Check gene totals
  table_up %>% mutate(total=DEGS_with_feature+Non_DEGS_with_feature+DEGS_without_feature+Non_DEGS_without_feature) %>% 
    distinct(total) #%>% nrow()
  
  table_down <- table_deg_feats %>% #filter(Feature!="No Feature") %>% 
    filter(Down>1) %>%  # Try just looking at enrichment where >1 DEG 
    mutate(DEGS_with_feature=Down,
           Non_DEGS_with_feature=No+Up,
           DEGS_without_feature=total_down-Down,
           Non_DEGS_without_feature=total_not+total_up-No-Up) %>%
    column_to_rownames(var="Feature") %>% filter(Down!=0) %>% select(-c(No,Up,Down)) #%>% t()
  
  # Check gene totals
  table_down %>% mutate(total=DEGS_with_feature+Non_DEGS_with_feature+DEGS_without_feature+Non_DEGS_without_feature) %>% 
    distinct(total) #%>% nrow()

  # FISHER'S EXACT
  # Function
  contingency <- function(df,feature){
    t <- matrix(c(as.numeric(df[1,feature]),
                  as.numeric(df[2,feature]),
                  as.numeric(df[3,feature]),
                  as.numeric(df[4,feature])),nrow=2)
    test <- fisher.test(t)
    return(test$p.value)
  }
  
  # Fisher's test and Bonferonni set
  matrix_up <- t(table_up)
  features_up <- colnames(matrix_up)
  p_values_up <- sapply(features_up, contingency, df = matrix_up)
  p_values_up <- data.frame(p_values_up) %>% mutate(Set="Up") %>% 
    mutate(P_value=p_values_up) %>% 
    select(Set,P_value) %>% rownames_to_column(var="Feature")
  # Apply Bonferroni here
  #bonferoni_threshold_up <- 0.05/(nrow(p_values_up))
  #p_values_up <- p_values_up %>% filter(P_value<=bonferoni_threshold_up)
  # Apply BH
  p_values_up$FDR <- p.adjust(p_values_up$P_value, method = "BH" )
  p_values_up <-  p_values_up %>% filter(FDR<=0.001) 
  
  matrix_down <- t(table_down)
  features_down <- colnames(matrix_down)
  p_values_down <- sapply(features_down, contingency, df = matrix_down)
  p_values_down <- data.frame(p_values_down) %>% mutate(Set="Down") %>% 
    mutate(P_value=p_values_down) %>% 
    select(Set,P_value) %>% rownames_to_column(var="Feature")
  # Apply Bonferroni here
  #bonferoni_threshold_down <- 0.05/(nrow(p_values_down))
  #p_values_down <- p_values_down %>% filter(P_value<=bonferoni_threshold_down)
  # Apply BH
  p_values_down$FDR <- p.adjust(p_values_down$P_value, method = "BH" )
  p_values_down <-  p_values_down %>% filter(FDR<=0.001) 
  
  result <- rbind(p_values_down,p_values_up)
  
  # Add Mean LogFC
  logFC_up <- df_deg_feat %>% filter(DEG=="Up") %>% group_by(Feature) %>% summarise(Mean_LogFC=mean(Log_FC)) %>% mutate(Set="Up")
  logFC_down <- df_deg_feat %>% filter(DEG=="Down") %>% group_by(Feature) %>% summarise(Mean_LogFC=mean(Log_FC)) %>% mutate(Set="Down")
  logFC_both <- rbind(logFC_up,logFC_down) 
  
  # Add Gene Number
  ratio_up <- table_up %>% rownames_to_column(var="Feature") %>% mutate(Set="Up")
  ratio_down <- table_down %>% rownames_to_column(var="Feature") %>% mutate(Set="Down")
  ratios <- rbind(ratio_up,ratio_down) %>% 
    mutate(Number_genes=DEGS_with_feature) %>% 
    mutate(Ratio=DEGS_with_feature/(DEGS_with_feature+DEGS_without_feature)) %>% 
    select(Feature,Set,Number_genes,Ratio)
  
  result2 <- left_join(result,logFC_both,by=c("Feature","Set")) %>% 
    left_join(.,ratios,by=c("Feature","Set")) %>% 
    mutate(Clade=clade,Comparison=comparison)
  
  # Apply Bonferroni here
  #bonferoni_threshold <- 0.05/(nrow(result2))
  #result3 <- result2 %>% filter(P_value<=bonferoni_threshold)
  
  return(result2)
}
```




# Supp. Fig. 1 Model Evaluation

```{r C-Growth-Curve, fig.height=10,fig.width=10}
# Access data
wells <- read_xlsx("../data/growth_curves.xlsx",sheet="wells") %>% clean_names()
absorbances <- read_xlsx("../data/growth_curves.xlsx",sheet="absorbances",col_names=F,skip=3) %>% clean_names()

# Transform data
data <- pivot_longer(absorbances, names_to = "cycle", cols = -c(x1)) %>% 
  mutate(hour = (as.numeric(gsub("x","",cycle))-2)) %>% 
  rename(well = x1) %>% 
  left_join(.,wells,by="well") 

# Calculate mean and sd
calc <- data %>% 
  filter(contents != "YPD") %>% 
  group_by(hour,clade) %>% 
  summarise(mean_value = mean(value), 
            sd_value = sd(value))

# Graph growth curves
plot_growth <- calc %>% ggplot(aes(x=hour, y=mean_value, colour=clade)) + 
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = mean_value - sd_value, ymax = mean_value + sd_value),
                #colour = "black",
                alpha = 0.5) +
  scale_y_log10(expand = c(0,0)) +
  scale_x_continuous(breaks = c(0,6,12,18,24),
                     expand = c(0,0)) +
  my_theme +
  scale_colour_nejm() + 
  labs(title ="Median Isolate Growth (and Standard Deviation)", 
       x = "Time (hours)",
       y="log10(absorbance)", 
       colour = "Clade")
plot_growth

#ggsave(file = "figures/growth_curve_v1_2024_04_10.pdf", plot = plot_growth, height = 5, width = 7, dev = cairo_pdf)

# Analyse with growthcurver
growthcurver_data <- data %>% 
  mutate(well=paste(well,contents,clade,biological,technical,sep="_")) %>% select(well,hour,value) %>% 
  pivot_wider(names_from = well,
              values_from = value) %>% 
  rename(time=hour) %>% 
  rename(blank=`A1_YPD_Control_NA_NA`)

# Whole plate calculation
gc_out <- SummarizeGrowthByPlate(growthcurver_data, bg_correct = "blank") %>% 
  filter(!grepl("YPD",sample)) %>% filter(grepl("_",sample)) %>% 
  separate(sample,into=c("well","contents","clade","biological","technical"),sep="_") %>% 
  select(clade,r)

# Ask how many of these are normally distributed
gc_out %>% group_by(clade) %>%
  summarise(p_value = shapiro.test(r)$p.value)
# All values > 0.34 so we assume a normal distribution
anova_result <- aov(r ~ clade, data = gc_out)
summary(anova_result)
TukeyHSD(anova_result)


gc_out %>% ggplot(aes(x=clade,y=r,fill=clade)) + geom_point() +
    geom_bar(stat = "summary",
           fun = "mean",
           alpha=0.8
           ) +
  geom_quasirandom(cex=1.5,
               alpha = 0.5,
                ) + 
  geom_errorbar(stat = "summary", 
                fun.data = "mean_se", 
                width = 0.25,
                alpha = 0.8) +
  scale_fill_nejm() + scale_colour_nejm() +
  stat_compare_means(comparisons=list(c("I","II"),
                                      #c("I","III"),
                                      #c("I","IV"),
                                      #c("I","V"),
                                      c("II","III"),
                                      c("II","IV"),
                                      c("II","V")
                                      #c("III","IV"),
                                      #c("III","V"),
                                      #c("IV","V")
                                      ),method="t.test",label="p.signif") +
  my_theme + labs(x="Clade",y="Maximal Growth Rate in YPD (R)")

pwc <- pairwise.t.test(gc_out$r,gc_out$clade, p.adjust.method = "BH")
pwc_data <- as.data.frame(as.table(pwc$p.value)) %>%
  filter(!is.na(Freq)) %>%
  mutate(label = ifelse(Freq < 0.001, "***", ifelse(Freq < 0.01, "**", ifelse(Freq < 0.05, "*", "ns"))))

```

```{r pca-plots-rna-seq-both-ak-and-yeast,fig.width=10, fig.height=4, dev='pdf'}
# Load data
require(tidyverse)

input <- "12_RNA_Seq_B8441"
plot_title <- "Yeast Genes"
option <- "Timepoint"

make_fpkm_pca <- function(input,plot_title,option,option_type){
  file <- paste("laboratory/methods/328-pca/",input,".FPKM",sep="")
  transcripts <- read_tsv(file, col_names = F) %>% 
    rename(condition=X1,transcript=X2,fpkm=X3) %>% 
    # Remove Zero values - takes away about half
    filter(fpkm != 0)
  
  # Check for pivot wider method
  # test <- head(fkpm_fish_genes)
  # fkpm_fish_genes_matrix <- pivot_wider(test,names_from = transcript,values_from = fpkm)
  
  # Make Matrix
  # The number of columns here... 
  transcripts_matrix <- pivot_wider(transcripts,names_from = transcript,
                                     values_from = fpkm,
                                     values_fill = 0)
  
  # Check there's no NAs - correct
  #table(is.na(transcripts_matrix))
  
  # Add more information
  transcripts_matrix_expanded <- transcripts_matrix %>% 
    separate_wider_delim(cols = "condition", delim="_", names=c("Injection","Timepoint","rep"))
  transcripts_matrix_expanded$Injection <- factor(transcripts_matrix_expanded$Injection,
                                                  levels=c("I","II","III","IV","V","Water","None"))
    mat <- as.matrix(transcripts_matrix_expanded[, -(1:3)])

  
  # Convert rownames
  #transcripts_matrix_rownames <- column_to_rownames(transcripts_matrix,var="condition")
  #mat <- as.matrix(transcripts_matrix_rownames)
  
  # Plot
  library(ggfortify)
  pca_res <- prcomp(mat, scale. = TRUE)
  require(ggprism)
  require(ggsci)
  title = paste("PCA Plot for FPKM in",plot_title)
  autoplot(pca_res, data=transcripts_matrix_expanded, colour = "Injection", shape = "Timepoint", frame = option, frame.type = 'norm', frame.colour = option_type) + labs(title=title) + theme_minimal() + scale_color_nejm() + scale_fill_nejm()
}

a <- make_fpkm_pca("15_fish_seq_ncbi_genes","AK Genes","T","Injection")
b <- make_fpkm_pca("15_fish_seq_ncbi_isoforms","AK Isoforms","T","Injection")
c <- make_fpkm_pca("12_RNA_Seq_B8441","Yeast Genes","T","Timepoint")
d <- make_fpkm_pca("15_fish_seq_ncbi_genes","AK Genes","T","Injection")
require(patchwork)
c+d
```


```{r F-Correlation-Matrix-A-dispar-Sham-vs-No-Injection,fig.height=8.5,fig.width=10}
require(ComplexHeatmap)
require(viridis)
cpm_matrix <- read.table("../results/trinity_B8441/edgeR.123456789.dir_results_23_10_17/RSEM.isoform.counts.matrix.minRow10.CPM.log2.sample_cor.dat")

# Extract metadata for rows and columns
row_metadata <- extract_metadata(rownames(cpm_matrix))
col_metadata <- extract_metadata(colnames(cpm_matrix))

# Define consistent color mappings
require(ggsci)
clade_colors <- pal_lancet()(5)  # Get 5 colors from the Lancet palette
clade_colors <- pal_nejm()(5)
names(clade_colors) <- c("I", "II", "III", "IV", "V")
#clade_colors <- c("I" = "red", "II" = "blue", "III" = "green", "IV" = "purple", "V" = "orange")
#timepoint_colors <- c("24h" = "red", "48h" = "darkred", "ypd" = "orange")
#replicate_colors <- c("1" = "lightgray", "2" = "gray", "3" = "darkgray")
timepoint_colors <- c("24h" = "cyan", "48h" = "magenta","ypd" = "burlywood1")
replicate_colors <- c("1" = "white", "2" = "darkgrey", "3" = "black")

# Create HeatmapAnnotation objects with consistent color mappings
ha_row <- rowAnnotation(
  Clade = row_metadata$Clade,
  Timepoint = row_metadata$Timepoint,
  Replicate = row_metadata$Replicate,
  col = list(Clade = clade_colors, Timepoint = timepoint_colors, Replicate = replicate_colors)
)

ha_col <- columnAnnotation(
  Clade = col_metadata$Clade,
  Timepoint = col_metadata$Timepoint,
  Replicate = col_metadata$Replicate,
  col = list(Clade = clade_colors, Timepoint = timepoint_colors, Replicate = replicate_colors)
)

# Add viridis colours for correlation
viridis_colours <- colorRamp2(seq(0.7, 1, length.out = 100), viridis(100))

# Generate the heatmap with consistent annotations
plot <- Heatmap(cpm_matrix, name = "Correlation", top_annotation = ha_col, left_annotation = ha_row,col = viridis_colours)
plot
require(tidyHeatmap)
#save_pdf(plot,file="../figures/trinity_b8441_sample_correlation_v1_2024_09_04.pdf",height = 10, width = 10)
```


```{r G-Correlation-Matrix-A-dispar-C-auris-vs-Sham-Injection,fig.height=8.5,fig.width=10}
require(ComplexHeatmap)
cpm_matrix <- read.table("/Users/hughgifford/Dropbox/phd/laboratory/methods/323-fish-seq-ncbi/none_vs_water/edgeR.123456789.dir/RSEM.isoform.counts.matrix.minRow10.CPM.log2.sample_cor.dat")

# Extract metadata for rows and columns
row_metadata <- extract_metadata(rownames(cpm_matrix))
col_metadata <- extract_metadata(colnames(cpm_matrix))

# Define consistent color mappings
require(ggsci)
clade_colors <- pal_nejm()(7)  # Get 5 colors from the Lancet palette
print(clade_colors)
#names(clade_colors) <- c("I", "II", "III", "IV", "V")
clade_colors <- c("None"="#FFDC91FF","Water"="#6F99ADFF")
#clade_colors <- c("I" = "red", "II" = "blue", "III" = "green", "IV" = "purple", "V" = "orange")
timepoint_colors <- c("24h" = "cyan", "48h" = "magenta")
replicate_colors <- c("1" = "white", "2" = "darkgray", "3" = "black")

# Create HeatmapAnnotation objects with consistent color mappings
ha_row <- rowAnnotation(
  Clade = row_metadata$Clade,
  Timepoint = row_metadata$Timepoint,
  Replicate = row_metadata$Replicate,
  col = list(Clade = clade_colors, Timepoint = timepoint_colors, Replicate = replicate_colors)
)

ha_col <- columnAnnotation(
  Clade = col_metadata$Clade,
  Timepoint = col_metadata$Timepoint,
  Replicate = col_metadata$Replicate,
  col = list(Clade = clade_colors, Timepoint = timepoint_colors, Replicate = replicate_colors)
)

# Generate the heatmap with consistent annotations
plot <- Heatmap(cpm_matrix, name = "Correlation", top_annotation = ha_col, left_annotation = ha_row,col = viridis_colours) # was col = viridis::viridis(100)
plot
#save_pdf(plot,file="../figures/trinity_gjey01_water_sample_correlation_v0_2024_09_04.pdf",height = 5, width = 5)
```

```{r H-Correlation-Matrix-C-auris,fig.height=8.5,fig.width=10}
cpm_matrix <- read.table("/Users/hughgifford/Dropbox/phd/laboratory/methods/323-fish-seq-ncbi/infection_vs_water/edgeR.123456789.dir/RSEM.isoform.counts.matrix.minRow10.CPM.log2.sample_cor.dat")

# Extract metadata for rows and columns
row_metadata <- extract_metadata(rownames(cpm_matrix))
col_metadata <- extract_metadata(colnames(cpm_matrix))

# Define consistent color mappings
clade_colors <- pal_nejm()(6)  # Get 5 colors from the Lancet palette
names(clade_colors) <- c("I", "II", "III", "IV", "V","Water")
#clade_colors <- c("None"="lightgreen","Water"="darkblue")
#clade_colors <- c("I" = "red", "II" = "blue", "III" = "green", "IV" = "purple", "V" = "orange")
timepoint_colors <- c("24h" = "cyan", "48h" = "magenta")
replicate_colors <- c("1" = "white", "2" = "darkgray", "3" = "black")

# Create HeatmapAnnotation objects with consistent color mappings
ha_row <- rowAnnotation(
  Clade = row_metadata$Clade,
  Timepoint = row_metadata$Timepoint,
  Replicate = row_metadata$Replicate,
  col = list(Clade = clade_colors, Timepoint = timepoint_colors, Replicate = replicate_colors)
)

ha_col <- columnAnnotation(
  Clade = col_metadata$Clade,
  Timepoint = col_metadata$Timepoint,
  Replicate = col_metadata$Replicate,
  col = list(Clade = clade_colors, Timepoint = timepoint_colors, Replicate = replicate_colors)
)

viridis_colours <- colorRamp2(seq(0.7, 1, length.out = 100), viridis(100))

# Generate the heatmap with consistent annotations
plot <- Heatmap(cpm_matrix, name = "Correlation", top_annotation = ha_col, left_annotation = ha_row,col = viridis_colours)
plot

#save_pdf(plot,file="../figures/trinity_gjey01_sample_correlation_v0_2024_09_04.pdf",height = 10, width = 10)
```



# Supp. Fig. 2: *A. dispar* Enrichment

```{r A-dispar-Enrichment}


# Enrichment Testing on Sham Injection
# Select only Sham DEGs
df_degs_input <- ak_logfc %>% filter(Category=="Inject Controls")
# Count number of DEGs
df_degs_input %>%  filter(DEG!="No") %>% select(Locus_id) %>% unique() %>% nrow()
100*(30/27481)
# Prep Features Input
df_features <- read_tsv("../results/enrichment_GJYE01/annotations_d2go_blastkoala_hmmer_gjye01.tsv") %>% mutate(Feature=paste(Go_term,Description))#rename(Feature=Go_term)
# List Gene Names
list_gene_names <- df_features %>% select(Locus_id) %>% distinct()
# Prepare Features to Locus id lookup table
df_features_input <- df_features %>% select(Locus_id,Feature)
# Perform enrichment testing
x_sham <- rbind(enrichment("24h","Water vs None"),
                enrichment("48h","Water vs None"))
# Only 4 terms enriched, all with same logFC, implying a driver.
# Get a list of the GO terms
x_features <- x_sham %>% select(Feature)
x_enriched_genes <- df_degs_input %>% filter(DEG=="Up") %>% left_join(.,df_features_input,by="Locus_id") %>% unique() %>% filter(Feature %in% x_features$Feature) %>% select(Locus_id) %>% unique()
ak_descriptions %>% filter(Locus_id %in% x_enriched_genes$Locus_id)


# How many are by 4?
df_xb0 <- x_better0 %>% select(Feature) %>% table() %>% as.data.frame()
```

```{r A-dispar-Enrichment-Infection}
# Enrich Infection
df_degs_input <- ak_logfc %>% filter(Category=="Infection vs Sham Controls")
x <- rbind(enrichment("24h","I vs Water"),
           enrichment("24h","II vs Water"),
           enrichment("24h","III vs Water"),
           enrichment("24h","IV vs Water"),
           enrichment("24h","V vs Water"),
           enrichment("48h","I vs Water"),
           enrichment("48h","II vs Water"),
           enrichment("48h","III vs Water"),
           enrichment("48h","IV vs Water"),
           enrichment("48h","V vs Water"))
clade <- "48h"
comparison <- "IV vs Water"



#x_better1 <- read_csv("../tables/degs_interclade_virulence_enrichment_lookup.csv") 

hotdot <- x %>% #_better2 %>% 
  #left_join(x_better1,by="Feature") %>% 
  #filter(Category!="Exclude") %>% 
  mutate(Comparison=gsub(" vs Water","",Comparison)) %>% 
  ggplot(aes(x=Clade,y=Feature,colour=Mean_LogFC,size=Ratio,alpha = FDR)) + geom_point() + theme_minimal(base_size = 8) +
  scale_y_discrete(limits=rev
                   #,position = "right"
                   ) +  
  scale_alpha_continuous(trans = "reverse") + 
  facet_grid(#rows = vars(Category), 
             cols = vars(Set,Comparison),
             scales="free_y",space="free_y",switch = "y") + 
  theme(strip.placement = "outside") +
  scale_colour_gradient2(
    low = "darkblue",
    mid = "white",
    high = "red",
    midpoint = 0  # Change the midpoint if needed
  ) #+ 
   # theme(
   # strip.placement = "outside",
   # strip.text.y.left = element_text(angle = 0),  # Adjust angle if needed
   # strip.text.y = element_text(angle = 0),      # Angle for strip text if needed
   # strip.background = element_blank(),          # Remove background for clean look
   # axis.text.y = element_text(hjust = 1),       # Right-align y-axis text (names)
   # axis.ticks.y = element_blank()#,              # Remove y-axis ticks
   # #panel.spacing = unit(1, "lines")           # Adjust spacing between panels if needed
 # ) 
hotdot

# ggsave(file="../figures/enrichment_ak_v0_2024_08_30.pdf",plot = hotdot, height = 14, width = 10, dev = cairo_pdf)

x_better0 <- x %>%
  mutate(Term=ifelse(grepl("^GO",Feature),"GO",
              ifelse(grepl("^K",Feature),"KEGG",
              ifelse(grepl("^PF",Feature),"PFAM","Other")))) %>% 
  #mutate(Feature=gsub(".*:\ ","",Feature)) %>% 
  mutate(Clade=gsub(" vs ","\nvs\n",Clade))
require(ggsci)
#write_tsv(x_better0,file="../data/A_dispar_enrichment.tsv")
a <- read_tsv("../results/trinity_GJEY01/revigo/Revigo_BP_Scatterplot.tsv") %>% 
  mutate(GO_category="GO Biol. Process")
b <- read_tsv("../results/trinity_GJEY01/revigo/Revigo_CC_Scatterplot.tsv") %>% 
  mutate(GO_category="GO Cell. Compart.")
c <- read_tsv("../results/trinity_GJEY01/revigo/Revigo_MF_Scatterplot.tsv") %>% 
  mutate(GO_category="GO Mol. Function")
revigo <- rbind(a,b,c) %>% 
  mutate(Feature=paste(TermID,Name)) 
revigo_remove <- revigo %>% 
  filter(Representative != "null") 
revigo_lookup <- revigo %>% 
  select(Feature,GO_category)

go_remove <- x_better0 %>% 
  filter(!Feature %in% revigo_remove$Feature) %>% 
  left_join(.,revigo_lookup,by="Feature") %>% 
  mutate(Term=ifelse(grepl("^G",Feature),GO_category,Term))

hotdot1 <- go_remove %>% #x_better0 %>% #_better2 %>% 
  #left_join(x_better1,by="Feature") %>% 
  #filter(Category!="Exclude") %>% 
  mutate(Comparison=gsub(" vs Water","",Comparison)) %>% 
  #filter(Comparison!="II") %>% filter(Comparison!="III") %>% filter(Comparison!="V") %>% 
  ggplot(aes(x=Mean_LogFC,y=fct_reorder(Feature,-Mean_LogFC),colour=Comparison,size=Ratio,alpha = FDR,shape=Clade)) + geom_point() + theme_minimal(base_size = 8) +
  scale_y_discrete(limits=rev
                   #,position = "right"
                   ) +  
  scale_alpha_continuous(trans = "reverse") + 
  facet_grid(rows=vars(Term),scale="free_y",space="free_y",switch = "y")+
  #facet_grid(rows = vars(Set), 
  #           cols = vars(Comparison),
  #           scales="free_y",space="free_y",switch = "y") + 
  theme(strip.placement = "outside") +
  scale_colour_nejm()
  #scale_colour_lancet()
  #scale_colour_gradient2(
  #  low = "darkblue",
  #  mid = "white",
  #  high = "red",
  #  midpoint = 0  # Change the midpoint if needed
  #) 
hotdot1


#ggsave(file="../figures/enrichment_ak_I-V_v2_2024_09_06.pdf",plot = hotdot1, height = 14, width = 10, dev = cairo_pdf)
```


## Supplementary Table 2

```{r Extract-Genes-For-Table}
df_degs_input %>% 
    filter(Clade=="48h") %>% 
    filter(Comparison=="IV vs Water") %>% 
    select(Clade,Comparison,Locus_id,DEG,Log_FC) %>% 
  left_join(.,df_features_input,by="Locus_id") %>% 
  filter(grepl("GO:0003412",Feature)) %>% 
  filter(DEG=="Up") %>% select(Locus_id) %>% 
  left_join(ak_descriptions,by="Locus_id") %>% 
  distinct()

# The two genes for AK HMOX in the face of IV at 48 h were HMOX DN112160|c6_g3 and DN109585|c0_g1
# Down genes at 24h in IV
# GO:0005577 fibrinogen complex GO:0051258 protein polymerization GO:0072378 blood coagulation, fibrin clot formation #GO:0007596 blood coagulation
# DN174715|c0_g1	HEP2_RAT	Heparin cofactor 2	Q64268	
# DN123410|c1_g1	FIBA_CHICK	Fibrinogen alpha chain	P14448	
# DN82886|c0_g1	FIBG_RAT	Fibrinogen gamma chain	P02680
# GO:0007599 hemostasis - as above 
# DN38373|c0_g1	FA5_MOUSE	Coagulation factor V	O88783
# !!! And the oxidases
# DN124433|c0_g3	HPHL1_HUMAN

# GO:0006958 complement activation, classical pathway
# GO:0004867 serine-type endopeptidase inhibitor activity
# DN69046|c0_g1	CFAI_HUMAN	Complement factor I	P05156	
# DN82924|c0_g1	CO9_ONCMY	Complement component C9	P06682
# DN174715|c0_g1	HEP2_RAT	Heparin cofactor 2	Q64268	
# DN17846|c0_g1	VCO3_NAJKA	Cobra venom factor	Q91132	
# DN96873|c0_g1	A2MG_HUMAN	Alpha-2-macroglobulin	P01023	
# DN132852|c0_g1	COSA1_HUMAN	Collagen alpha-1(XXVIII) chain	Q2UY09	
# DN105325|c0_g1	ITIH2_MOUSE	Inter-alpha-trypsin inhibitor heavy chain H2	Q61703	
# DN127624|c3_g4	CO3_ONCMY	Complement C3	P98093	
# DN66232|c0_g1	A2MG_RAT	Alpha-2-macroglobulin	P06238

# GO:0016798 hydrolase activity, acting on glycosyl bonds
# GO:0004553 hydrolase activity, hydrolyzing O-glycosyl compounds
# DN132622|c1_g1	MA1A1_PIG	Mannosyl-oligosaccharide 1,2-alpha-mannosidase IA	O02773	
# DN129157|c0_g1	MANBA_HUMAN	Beta-mannosidase	O00462	
# DN129669|c0_g1	LYAG_MOUSE	Lysosomal alpha-glucosidase	P70699	
# DN119505|c1_g1	ASM_BOVIN	Sphingomyelin phosphodiesterase	Q0VD19	
# DN129257|c3_g1	MA2B1_MACFA	Lysosomal alpha-mannosidase	Q60HE9

# GO:0004866 endopeptidase inhibitor activity - 7 genes
# Reduction of various genes indicates... poor development?

# All the LAMININs going up could mean... invasion?
# DN143670|c0_g1	LAMA1_HUMAN	Laminin subunit alpha-1	P25391	
# DN104867|c0_g1	LAMA2_MOUSE	Laminin subunit alpha-2	Q60675
enriched_only <- df_degs_input %>% filter(DEG!="No") %>% select(Clade,Comparison,Locus_id,DEG,Log_FC) %>% 
  left_join(.,df_features_input,by="Locus_id") %>% 
  filter(Feature %in% go_remove$Feature) %>% 
  select(Locus_id) %>% unique()
#x_features %>% filter(Locus_id %in% enriched_only$Locus_id) %>% 
#  filter(!grepl("^DN",Unique_rowname)) %>% 
#  write_tsv(file="../tables/A_dispar_DEGs_infection_raw_enriched.tsv")




```
# Supp. Fig. 4 - *C. auris* pangenome

```{r}
# Add Accessory Genome Data
df <- read_tsv("../data/C_auris_DEGS_timepoints.tsv") %>% 
  rename(Locus_id=Gene) %>% 
  mutate(`-1log10(FDR)`=-1*log10(FDR))

# Load the orthologues including Candida
df_orth_Candida <- read_tsv("~/Dropbox/phd/writing/auris_killifish/results/synima/2024_06_06_C_auris_C_albicans_C_haemulonii/GENE_CLUSTERS_SUMMARIES.Orthofinder/GENE_CLUSTERS_SUMMARIES.clusters_and_uniques",col_names = F)
df_orth_Candida <- df_orth_Candida %>% select(X1,X2,X4)
colnames(df_orth_Candida) <- c("Cluster","Strain","Locus_id")
df_orth_Candida <- df_orth_Candida %>% mutate(Strain=gsub("_GCA.*","",Strain)) %>% 
  mutate(Strain=gsub("_ASM.*","",Strain))

# Make a matrix
df_wide_orth_Candida <- df_orth_Candida %>% 
  group_by(Cluster,Strain) %>% 
  summarise(Number=n()) %>% 
  pivot_wider(names_from = Strain,
              values_from = Number,
              values_fill = list(Number=0)) %>% 
  mutate(Present_in_Auris=ifelse(Candida_auris_clade_I_B8441_V2+Candida_auris_clade_II_B11220+Candida_auris_clade_III_B11221_V1+Candida_auris_clade_IV_B11245+Candida_auris_clade_V_B18474_V1>0,"1","0"))

colnames(df_wide_orth_Candida) <- c("Cluster","Calb","III","II","IV","I","V","Chaem","Caur")
# Labels
df_label_orth_Candida <- df_wide_orth_Candida %>% 
# Single Copy Orthologues plus C_albicans C_haemulonii
  mutate(Category=ifelse(Calb==1&&Chaem==0&&Caur==0,"Unique_Alb",
                  ifelse(Calb>=1&&Chaem==0&&Caur==0,"Orthogroup_Alb",
                  ifelse(Calb==0&&Chaem==1&&Caur==0,"Unique_Haem",
                  ifelse(Calb==0&&Chaem>=1&&Caur==0,"Orthogroup_Haem",
                  ifelse(Calb==1&&Chaem==1&&Caur==0,"SCO_AlbHaem",
                  ifelse(Calb>=1&&Chaem>=1&&Caur==0,"MCO_AlbHAem",
                  ifelse(Calb==1&&Chaem==1&&I==1&&II==1&&III==1&&IV==1&&V==1,"SCO_All",
                  ifelse(Calb>=1&&Chaem>=1&&I>=1&&II>=1&&III>=1&&IV>=1&&V>=1,"MCO_All",
                  ifelse(Calb==0&&Chaem==0&&I==1&&II==1&&III==1&&IV==1&&V==1,"SCO_Auris",
                  ifelse(Calb==0&&Chaem==0&&I>=1&&II>=1&&III>=1&&IV>=1&&V>=1,"MCO_Auris",
                  ifelse(Calb==0&&Chaem==1&&I==1&&II==1&&III==1&&IV==1&&V==1,"SCO_HaemAuris",
                  ifelse(Calb==0&&Chaem>=1&&I>=1&&II>=1&&III>=1&&IV>=1&&V>=1,"MCO_HaemAuris",
                  ifelse(Calb==1&&Chaem==0&&I==1&&II==1&&III==1&&IV==1&&V==1,"SCO_AlbAuris",
                  ifelse(Calb>=1&&Chaem==0&&I>=1&&II>=1&&III>=1&&IV>=1&&V>=1,"MCO_AlbAuris",
                  ifelse(Calb==0&&Chaem==0&&I==1&&II==0&&III==0&&IV==0&&V==0,"Unique_AurisI",
                  ifelse(Calb==0&&Chaem==0&&I==0&&II==1&&III==0&&IV==0&&V==0,"Unique_AurisII",
                  ifelse(Calb==0&&Chaem==0&&I==0&&II==0&&III==1&&IV==0&&V==0,"Unique_AurisIII",
                  ifelse(Calb==0&&Chaem==0&&I==0&&II==0&&III==0&&IV==1&&V==0,"Unique_AurisIV",
                  ifelse(Calb==0&&Chaem==0&&I==0&&II==0&&III==0&&IV==0&&V==1,"Unique_AurisV",
                  ifelse(Calb==0&&Chaem==0&&I>=1&&II==0&&III==0&&IV==0&&V==0,"Orthogroup_AurisI",
                  ifelse(Calb==0&&Chaem==0&&I==0&&II>=1&&III==0&&IV==0&&V==0,"Orthogroup_AurisII",
                  ifelse(Calb==0&&Chaem==0&&I==0&&II==0&&III>=1&&IV==0&&V==0,"Orthogroup_AurisIII",
                  ifelse(Calb==0&&Chaem==0&&I==0&&II==0&&III==0&&IV>=1&&V==0,"Orthogroup_AurisIV",
                  ifelse(Calb==0&&Chaem==0&&I==0&&II==0&&III==0&&IV==0&&V>=1,"Orthogroup_AurisV",
                  ifelse(Calb==0&&Chaem==0&&I>=0&&II>=0&&III>=0&&IV>=0&&V>=0,"Accessory_Auris",
                  ifelse(Calb==0&&Chaem>=1&&I>=0&&II>=0&&III>=0&&IV>=0&&V>=0,"Accessory_HaemAuris",
                  ifelse(Calb>=1&&Chaem==0&&I>=0&&II>=0&&III>=0&&IV>=0&&V>=0,"Accessory_AlbAuris",
                  ifelse(Calb>=1&&Chaem>=1&&I==0&&II==0&&III==0&&IV==0&&V==0,"Accessory_AlbHaem",
                  ifelse(Calb>=1&&Chaem>=1&&I>=0&&II>=0&&III>=0&&IV>=0&&V>=0,"Accessory_AlbHaemAuris",
                  ifelse(Calb>=1&&Chaem>=1&&I==0&&II>=1&&III>=1&&IV>=1&&V>=1,"Accessory_Lost_in_I",
                  ifelse(Calb>=1&&Chaem>=1&&I>=1&&II==0&&III>=1&&IV>=1&&V>=1,"Accessory_Lost_in_II",
                  ifelse(Calb>=1&&Chaem>=1&&I>=1&&II>=1&&III==0&&IV>=1&&V>=1,"Accessory_Lost_in_III",
                  ifelse(Calb>=1&&Chaem>=1&&I>=1&&II>=1&&III>=1&&IV==0&&V>=1,"Accessory_Lost_in_IV",
                  ifelse(Calb>=1&&Chaem>=1&&I>=1&&II>=1&&III>=1&&IV>=1&&V==0,"Accessory_Lost_in_V","Other")
                         ))))))))))))))))))))))))))))))))))

View(df_label_orth_Candida)
table(df_label_orth_Candida$Category)

# Match
df_lookup_orth_Candida <- df_label_orth_Candida %>% select(Cluster,Category)
df_lookup_genes_Candida <- df_orth_Candida %>% select(Cluster,Locus_id)
df_lookup_Candida <- left_join(df_lookup_genes_Candida,
                               df_lookup_orth_Candida,by="Cluster")

pangenome_table <- df_lookup_Candida %>% group_by(Category) %>% summarise(Number=n())

degs_accessory <- df %>% filter(DEG!="No") %>% # Only the Up/Down DEGs
  left_join(.,df_lookup_Candida,by="Locus_id") %>% 
  mutate(Category=gsub("Unique.*","Unique",Category)) %>% # Simplify uniques as faceting for clade
  mutate(Category=gsub("Orthogroup.*","Unique_Orthogroup",Category)) %>% # Sim
  mutate(Category=gsub("_.*","",Category)) 


degs_accessory$Category <- factor(degs_accessory$Category,
                                    levels=c("Unique","Accessory","MCO","SCO"))


plot <- degs_accessory %>% group_by(Reference,Clade,Comparison,DEG,Category) %>% # Granular grouping - no need for Unique()
  summarise(Number=n()) %>% # Totals for each intersection
  mutate(FigNumber=ifelse(DEG=="Down",-Number,Number)) %>% # Create negative number for Down
  ggplot(aes(x=Clade,y=FigNumber,fill=Category,label=Number)) + # Plot bar chart
  geom_bar(stat="identity") + # Make seethrough
  geom_text(cex=2,position = position_stack(vjust=0.5)) + # Add numbers
  facet_wrap(Comparison~Reference,nrow=1) + # Divide so as to see Specific Ref found DEGs
  theme_prism() + # Simple theme
  scale_fill_manual(values=c("#6A6599FF","#DF8F44FF","#B24745FF","#79AF97FF")) +
  geom_hline(yintercept = 0, color = "black", size = 0.5)
plot
#ggsave(plot=plot,file="../figures/bar_pangenome_degs_v0_2024_08_16.pdf",height=10,width=10)

# If we define the accessory genome as non-MCO/SCO
define_accessory <- df %>% 
  left_join(.,df_lookup_Candida,by="Locus_id") %>% 
  mutate(Feature=ifelse(grepl("CO",Category),"Core","Accessory"))

feature_accessory_clade <- define_accessory %>% 
  filter(Feature=="Accessory") %>% 
  select(Locus_id,Feature,Clade) %>% 
  unique()

table(feature_accessory$Clade)

feature_accessory <- feature_accessory_clade %>% select(-c(Clade))
```


# Supp. Fig. 3 - *C. auris* enrichment

```{r fig.height=10,fig.width=20}
df_degs_input <- read_tsv("../data/C_auris_DEGS_timepoints.tsv") %>% # Load DEGs
  rename(Locus_id=Gene) %>% # Rename column
  mutate(`-1log10(FDR)`=-1*log10(FDR)) %>% # Calculate FDR
  filter(Clade=="I"|Reference=="Specific") %>% # Select reference specific
  select(-c(Reference))

df_features_input <- read_tsv("../data/C_auris_features.tsv") %>% 
  filter(!grepl("CAAL",Locus_id)) %>% 
  filter(!grepl("CXQ85",Locus_id)) %>% 
  filter(!grepl("CGD Name",Feature)) %>% 
  filter(!grepl("Cluster",Feature)) %>% 
  filter(!grepl("Not GPI",Feature)) %>% 
  filter(!grepl("SignalP5: OTHER",Feature)) %>% 
  filter(!grepl("No. Transmembrane Domains: 0",Feature)) %>% 
  mutate(Feature=ifelse(grepl("No. Transmembrane Domains:",Feature),"DeepTMM Predicted TM-domain(s)",Feature)) %>% distinct()

df_features_input <- rbind(df_features_input,feature_accessory)

x <- rbind(enrichment("I","48h vs ypd"),
           enrichment("II","48h vs ypd"),
           enrichment("III","48h vs ypd"),
           enrichment("IV","48h vs ypd"),
           enrichment("V","48h vs ypd"),
           
           enrichment("I","24h vs ypd"),
           enrichment("II","24h vs ypd"),
           enrichment("III","24h vs ypd"),
           enrichment("IV","24h vs ypd"),
           enrichment("V","24h vs ypd"),
           
           enrichment("I","48h vs 24h"),
           enrichment("II","48h vs 24h"),
           enrichment("III","48h vs 24h"),
           enrichment("IV","48h vs 24h"),
           enrichment("V","48h vs 24h")
)

# Reduce terms with REVIGO
x_export_revigo <- x %>% filter(grepl("GO",Feature)) %>% 
  select(Feature) %>% unique()
# write_csv(x_export_revigo,file="../data/C_auris_timepoints_export_revigo.csv")
# Decided against due to loss of SIT families

# Add Interclade
df_degs_with_FDR <- read_tsv("../data/C_auris_DEGS_interclades.tsv") %>% rename(Locus_id=Gene) %>% 
  mutate(`-1log10(FDR)`=-1*log10(FDR))

# Subsets
virulent <- c("I vs II","I vs III","IV vs II","IV vs III")
df_degs_vir <- df_degs_with_FDR %>% filter(Clade %in% virulent)
df_degs_input <- df_degs_vir

# Enrichment
x_vir <- rbind(enrichment("I vs II","24h"),
           enrichment("I vs III","24h"),
           enrichment("IV vs II","24h"),
           enrichment("IV vs III","24h"),
           
           enrichment("I vs II",  "48h"),
           enrichment("I vs III", "48h"),
           enrichment("IV vs II","48h"),
           enrichment("IV vs III", "48h"),
           
           enrichment("I vs II",  "ypd"),
           enrichment("I vs III", "ypd"),
           enrichment("IV vs II","ypd"),
           enrichment("IV vs III", "ypd")
)

# Filamentation
filamenting <- c("V vs I","V vs II","V vs III","V vs IV")
df_degs_filamenting <- df_degs_with_FDR %>% filter(Clade %in% filamenting)
df_degs_input <- df_degs_filamenting

x_fil <- rbind(enrichment("V vs I","24h"),
           enrichment("V vs II","24h"),
           enrichment("V vs III","24h"),
           enrichment("V vs IV","24h"),
           
           enrichment("V vs I",  "48h"),
           enrichment("V vs II", "48h"),
           enrichment("V vs III","48h"),
           enrichment("V vs IV", "48h"),
           
           enrichment("V vs I",  "ypd"),
           enrichment("V vs II", "ypd"),
           enrichment("V vs III","ypd"),
           enrichment("V vs IV", "ypd")
)

x <- x %>% mutate(Test="Timepoints")
x_vir <- x_vir %>% mutate(Test="Interclade")
x_fil <- x_fil %>% mutate(Test="Interclade")

all_x <- rbind(x,x_vir,x_fil) %>% 
  filter(Comparison!="ypd")


x_better0 <- all_x %>%
  mutate(Term=ifelse(grepl("^GO",Feature),"GO",
              ifelse(grepl("^K",Feature),"KEGG",
              ifelse(grepl("^PF",Feature),"PFAM","Other")))) %>% 
  #mutate(Feature=gsub(".*:\ ","",Feature)) %>% 
  mutate(Clade=gsub(" vs ","\nvs\n",Clade))

# Reduce terms with REVIGO
x_export_revigo <- x_better0 %>% filter(grepl("GO",Feature)) %>% 
  select(Feature) %>% unique()
#write_csv(x_export_revigo,file="../data/C_auris_export_revigo.csv")
# Decided against due to loss of SIT families

a <- read_tsv("../results/enrichment/Revigo_BP_Scatterplot.tsv") %>% 
  mutate(GO_category="GO Biol. Process")
b <- read_tsv("../results/enrichment/Revigo_CC_Scatterplot.tsv") %>% 
  mutate(GO_category="GO Cell. Compart.")
c <- read_tsv("../results/enrichment/Revigo_MF_Scatterplot.tsv") %>% 
  mutate(GO_category="GO Mol. Function")
revigo <- rbind(a,b,c) %>% 
  mutate(Feature=paste(TermID,Name,sep=": ")) 
revigo_remove <- revigo %>% 
  filter(Representative != "null") 
revigo_lookup <- revigo %>% 
  select(Feature,GO_category)

go_remove <- x_better0 %>% 
  filter(!Feature %in% revigo_remove$Feature) %>% 
  left_join(.,revigo_lookup,by="Feature") %>% 
  mutate(Term=ifelse(grepl("^G",Feature),GO_category,Term))

# Replace long terms
go_remove$Feature[go_remove$Feature=="GO:0016705: oxidoreductase activity, acting on paired donors, with incorporation or reduction of molecular oxygen"] <- "GO:0016705: oxidoreductase activity (paired donors)"
go_remove <- go_remove %>% filter(!grepl("GO:0006407",Feature))
go_remove$Term  <- factor(go_remove$Term,levels = c("GO Biol. Process","GO Cell. Compart.","GO Mol. Function","KEGG","PFAM","Other"))

# Several terms re-added manually
# GO:0006407: rRNA export from nucleus removed/obsolete https://www.ebi.ac.uk/QuickGO/term/GO:0006407
# GO:0005315: inorganic phosphate transmembrane transporter activity GO:0008519: ammonium transmembrane transporter activity  GO:0005536: glucose binding

hotdot <- go_remove %>% #_better2 %>% 
  #left_join(x_better1,by="Feature") %>% 
  #filter(Category!="Exclude") %>% 
  ggplot(aes(x=Clade,y=fct_reorder(Feature,-Mean_LogFC),colour=Mean_LogFC,size=Ratio,alpha = FDR)) + geom_point() + theme_minimal(base_size = 8) +
  scale_y_discrete(limits=rev
                   #,position = "right"
                   ) +  
  scale_alpha_continuous(trans = "reverse") + 
  facet_grid(rows = vars(Term), 
             cols = vars(Set,Test,Comparison),
             scales="free",space="free",switch = "y") + 
  theme(strip.placement = "outside") +
  scale_colour_gradient2(
    low = "darkblue",
    mid = "white",
    high = "red",
    midpoint = 0  # Change the midpoint if needed
  ) 
hotdot

#ggsave(hotdot,file="../figures/enrichment_auris_all_v0_2024_09_10.pdf",height=25,width=15)
```

```{r fig.height=10,fig.width=10}
# Alternate Enrichment
hotdot1 <- x_better0 %>% #_better2 %>% 
  #left_join(x_better1,by="Feature") %>% 
  #filter(Category!="Exclude") %>% 
  ggplot(aes(x=Mean_LogFC,y=fct_reorder(Feature,-Mean_LogFC),colour=Clade,size=Ratio,alpha = FDR,shape=Comparison)) + geom_point() + theme_minimal(base_size = 8) +
  scale_y_discrete(limits=rev
                   #,position = "right"
                   ) +  
  scale_alpha_continuous(trans = "reverse") + 
  #facet_grid(rows=vars(Term),scale="free_y",space="free_y",switch = "y")+
  facet_grid(rows = vars(Term), 
             cols = vars(Comparison),
             scales="free_y",space="free_y",switch = "y") + 
  theme(strip.placement = "outside") +
  scale_colour_nejm() 
  #scale_colour_lancet()
  #scale_colour_gradient2(
  #  low = "darkblue",
  #  mid = "white",
  #  high = "red",
  #  midpoint = 0  # Change the midpoint if needed
  #) 
hotdot1
```


# Fig 3 *In vivo vs in vitro* gene expression across five *C. auris* clades




```{r Check-MTL}
# Clade I
B9J08_001453 # PAP1 # Cluster 0002968 
CJI97_001149
CXQ85_003096
CJI96_0001190
FDK38_003632
CJJ09_003705
B9J08_001454 # OBPA # Cluster 0001046
CJJ09_003706
FDK38_003633
CJI96_0001192
CXQ85_003094
CJI97_001151
B9J08_001455 # PIKA # Cluster 0003659
FDK38_003634
CJI96_0001191
CXQ85_003095
CJI97_001150
CJJ09_003707
B9J08_005589 # MTL-a1 Cluster 0005348 # ALSO FDK38_003635
B9J08_005590 # MTL-a2 uniq_1358  
### III
CJI97_005719 # MTL-alpha1
library(ggplot2)
library(gggenes)
ggplot(example_genes1, aes(xmin = start, xmax = end, y = molecule, fill = gene,colour = Up)) +
  geom_gene_arrow() +
  facet_wrap(~ molecule, scales = "free", ncol = 1) +
  scale_fill_brewer(palette = "Set3")
example_genes1 <- example_genes %>% mutate(Up=100)

library(gggenomes)
gggenomes(
  genes = emale_genes, seqs = emale_seqs, links = emale_ava,
  feats = list(emale_tirs, ngaros=emale_ngaros, gc=emale_gc)) |> 
  add_sublinks(emale_prot_ava) |>
  sync() + # synchronize genome directions based on links
  geom_feat(position="identity", size=6) +
  geom_seq() +
  geom_link(data=links(2)) +
  geom_bin_label() +
  geom_gene(aes(fill=name)) +
  geom_gene_tag(aes(label=name), nudge_y=0.1, check_overlap = TRUE) +
  geom_feat(data=feats(ngaros), alpha=.3, size=10, position="identity") +
  geom_feat_note(aes(label="Ngaro-transposon"), data=feats(ngaros),
      nudge_y=.1, vjust=0) +
  geom_wiggle(aes(z=score, linetype="GC-content"), feats(gc),
      fill="lavenderblush4", position=position_nudge(y=-.2), height = .2) +
  scale_fill_brewer("Genes", palette="Dark2", na.value="cornsilk3")
```





# Xenosiderophore Transport Candidate Designation

```{r SIT1-Orthologues-B8441-SIT1}
b8441_v2_sit1_list <- c("B9J08_001499","B9J08_002110","B9J08_001948","B9J08_003908","B9J08_004474","B9J08_004475","B9J08_002581","B9J08_000002","B9J08_001519","B9J08_002465","B9J08_004097","B9J08_001487","B9J08_003921","B9J08_001521","B9J08_001547","B9J08_002241","B9J08_001542") # Identify XTC genes, excluding "B9J08_001548"
b8441_v2_str_list <- c("B9J08_003908","B9J08_004474","B9J08_004475","B9J08_000002","B9J08_002581") 
```


```{r Name-XTC-Genes-In-Order}
# Load the GFF
b8441_v3_gff <- read_tsv("../metadata/refs/Candida_auris_clade_I_B8441_V3_GCA_002759435.3/Candida_auris_clade_I_B8441_V3_GCA_002759435.3_reformat.annotation.gff3",skip=7,col_names = F) %>% 
  filter(X3=="gene") %>% # Choose only genes
  select(X1,X4,X5,X7,X9) %>% # Only relevant columns
  separate(X9,into=c("V3_locus_id","V2_locus_id"),sep="\\;old\\_locus\\_tag\\=") %>% # Separate new and old locus tags
  mutate(V3_locus_id=gsub("ID\\=","",V3_locus_id)) # Clean names

colnames(b8441_v3_gff) <- c("Contig","Start","End","Strand","V3_locus_id","V2_locus_id") # Assign column names

b8441_v3_xtc <- b8441_v3_gff %>% # New V3 Genes
  filter(V2_locus_id %in% b8441_v2_sit1_list) %>% # Only XTC
  arrange(V3_locus_id) %>% # Sort by new locus tag
  mutate(XTC_name=paste("XTC",seq(1:17),sep=""))

b8441_v3_xtc_lookup <- b8441_v3_xtc %>% select(V2_locus_id,XTC_name)

b8441_v3_str <- b8441_v3_gff %>% # New V3 Genes
  filter(V2_locus_id %in% b8441_v2_str_list) %>% # Only STR
  arrange(V3_locus_id) %>% # Sort by new locus tag
  mutate(XTC_name=paste("STR",seq(1:5),sep=""))

b8441_v3_sit <- b8441_v3_gff %>% # New V3 Genes
    filter(V2_locus_id %in% b8441_v2_sit1_list) %>% # Only SIT
  filter(!V2_locus_id %in% b8441_v2_str_list) %>% # Not STR
  arrange(V3_locus_id) %>% # Sort by new locus tag
  mutate(SIT_name=paste("SIT",seq(1:12),sep="")) %>% 
  left_join(b8441_v3_xtc_lookup,by="V2_locus_id")
```


```{r Plot-ggtree-for-Candida-SIT1,fig.height=14,fig.width=14}
# Load Tree file
tree <- read.tree("../results/synima/sit_clusters/sit.mfa.raxml.bestTree.tree")

# Obtain tip labels
labels <- data_frame(tree$tip.label) %>% rename(Locus_id=`tree$tip.label`) 

# Obtain feature info
features <- read_tsv("../data/C_auris_features.tsv")

tbl_labels_features <- left_join(labels,features,by="Locus_id") %>% 
  filter(Feature!="SignalP5: OTHER") %>% 
  filter(!grepl("CGD",Feature)) %>% 
  filter(!grepl("Cluster",Feature)) %>% 
  filter(Feature!="NetGPI: Not GPI-Anchored") %>% 
  mutate(Present=1) %>% pivot_wider(names_from = Feature,values_from = Present, values_fill = list(Present=0)) %>% 
  mutate(Transmembrane_domains=as.character(
      (14*`No. Transmembrane Domains: 14`)+
      (13*`No. Transmembrane Domains: 13`)+
      (12*`No. Transmembrane Domains: 12`)+
      (11*`No. Transmembrane Domains: 11`)+
      #(10*`No. Transmembrane Domains: 10`)+
      (9*`No. Transmembrane Domains: 9`)+
      #(8*`No. Transmembrane Domains: 8`)+
      #(7*`No. Transmembrane Domains: 7`)+
      (6*`No. Transmembrane Domains: 6`))) %>% 
      #(4*`No. Transmembrane Domains: 4`)+
      #(3*`No. Transmembrane Domains: 3`)+
      #(2*`No. Transmembrane Domains: 2`)+
      #(1*`No. Transmembrane Domains: 1`)
  select(-c(`No. Transmembrane Domains: 14`,`No. Transmembrane Domains: 13`,`No. Transmembrane Domains: 12`,`No. Transmembrane Domains: 11`,`No. Transmembrane Domains: 9`,`No. Transmembrane Domains: 6`)) %>% column_to_rownames(var="Locus_id") 

ggtree_Candida_SIT1 <- function(tree,genotype){
  gheatmap(ggtree(midpoint(tree)), # Midpoint rooted tree
  
  # Heatmap Options
                 tbl_labels_features, # Add heatmap
                 offset=0.45, # Offset the tip labels from the heatmap
                 width=1, # Give the heatmap a reasonable width
                 font.size=2.5, # This formula seems to work for angled names at the top
                 colnames_angle=45, 
                 colnames_position="top",
                 hjust=0, 
                 colnames_offset_y = 0,
                 colnames_offset_x = 0) +
  coord_cartesian(clip = 'off') + # This function ensures edges aren't clipped
  theme_tree(plot.margin=margin(165, 0, 0, 0)) + # This ensures top labels are seen
  scale_fill_lancet(name="Legend") + # Colours for heatmap, and name for legend!
  
  # Tree options  
  geom_tiplab(size=2.5, align=TRUE, linesize=.5, hjust=0) + # Align Tiplabels
  geom_treescale(x=0, y=0, width=0.1, color='black') + # Treescale
  geom_rootedge(rootedge=0.01) # Give root edge
}

ggtree_multiple_heatmaps <- function(tree,starting_heatmap,extra_heatmaps){
  
  # Produce starting tree with heatmap
  plot <- gheatmap(ggtree(midpoint(tree)), # Midpoint rooted tree
  
  # Heatmap Options
                 starting_heatmap$df, # Add heatmap
                 offset=starting_heatmap$offset, # Offset the tip labels from the heatmap
                 width=starting_heatmap$width, # Give the heatmap a reasonable width
                 font.size=2.5, hjust=0,  # This formula seems to work for angled names at the top
                 colnames_angle=45, colnames_position="top", colnames_offset_y = 0, colnames_offset_x = 0) +
  coord_cartesian(clip = 'off') + # This function ensures edges aren't clipped
  theme_tree(plot.margin=margin(165, 0, 0, 0)) + # This ensures top labels are seen
  starting_heatmap$colour_scheme + # Colours for heatmap, and name for legend!
  
  # Tree options  
  geom_tiplab(size=2.5, align=TRUE, linesize=.5, hjust=0) + # Align Tiplabels
  geom_treescale(x=0, y=0, width=0.1, color='black') + # Treescale
  geom_rootedge(rootedge=0.01) # Give root edge
  
  # Loop through the extra heatmaps
  for(i in seq_along(extra_heatmaps)){ # sequence along to get hold of each heatmap
    extra_heatmap <- extra_heatmaps[[i]] # Assign each heatmap
    plot <- plot + new_scale_fill() # Prepare the original plot
    plot <- gheatmap(plot, extra_heatmap$df, offset=extra_heatmap$offset, width=extra_heatmap$width,
                     font.size=2.5, hjust=0, 
                     colnames_angle=45, colnames_position="top",colnames_offset_y = 0, colnames_offset_x = 0) + 
      extra_heatmap$colour_scheme
  }
  plot
}

# Dataset
species <- read_csv("../lists/lookup_Locus_id_Species.tsv")

tbl_labels_Candida <- labels %>% rowwise() %>%
  mutate(Species = species$Species[which(str_detect(Locus_id, species$Pattern_in_locus_id))[1]]) %>%
  ungroup() %>% column_to_rownames(var="Locus_id") 

# Sample usage
starting_heatmap <- list(df = tbl_labels_features,offset=0.45,width=1,colour_scheme=scale_fill_lancet())
h1 <- list(df=tbl_labels_Candida,offset=4,width=0.04,colour_scheme=scale_fill_lancet(name="Species"))
extra_heatmaps <- list(h1)
ggtree_multiple_heatmaps(tree,starting_heatmap,extra_heatmaps)

tbl_select_features <- tbl_labels_features %>% select(`GO:0033214: siderophore-dependent iron import into cell`,`GO:1904334: heme import across plasma membrane`,`K08197: ARN; MFS transporter, SIT family, siderophore-iron:H+ symporter`,`PF07690.20: MFS_1: Major Facilitator Superfamily`,`PF06609.17: TRI12: Fungal trichothecene efflux pump (TRI12)`,`NetGPI: GPI-Anchored`,`SignalP5: SP(Sec/SPI)`)# %>% as.character()
tbl_select_features[tbl_select_features==0] <- "Absent"
tbl_select_features[tbl_select_features==1] <- "Present"
# Unsure why but this doesn't reorder the legend
tbl_select_features <- tbl_select_features %>% mutate(across(everything(), ~ factor(.x, levels = c("Present", "Absent"))))

# Transmembrane domain numbers
tbl_tm <- tbl_labels_features %>% select(Transmembrane_domains)
tbl_tm$Transmembrane_domains <- as.numeric(tbl_tm$Transmembrane_domains)

# Clusters
tbl_clusters <- left_join(labels,features,by="Locus_id") %>% 
  filter(grepl("Cluster",Feature)) %>% 
  rename(`Orthofinder Cluster Assignment`=Feature) %>% 
  column_to_rownames(var="Locus_id")

# Heatmap of expression
df_degs_input <- read_tsv("../data/C_auris_DEGS_timepoints.tsv") %>% # Load DEGs
  rename(Locus_id=Gene) %>% # Rename column
  filter(Clade=="I"|Reference=="Specific") %>% # Select reference specific
  select(-c(Reference,Clade,DEG,FDR))

df_labels_degs <- left_join(labels,df_degs_input,by="Locus_id") %>% 
  pivot_wider(names_from = Comparison,values_from = Log_FC, values_fill = list(Log_FC=0)) %>% select(-c(`NA`)) %>% 
  column_to_rownames(var="Locus_id")

# Generate plot

# Features
starting_heatmap <- list(df = tbl_select_features,offset=0.5,width=0.32,colour_scheme=scale_fill_manual(values=c("lightgrey","black"),name="Present/Absent"))

# TM
h1 <- list(df=tbl_tm,offset=1.6,width=0.04,colour_scheme=scale_fill_viridis_c(name="No. TM Domains"))

# Cluster
h2 <- list(df=tbl_clusters,offset=1.8,width=0.04,colour_scheme=scale_fill_nejm(name="Orthofinder Cluster Assignment"))

# Species
h3 <- list(df=tbl_labels_Candida,offset=2.0,width=0.04,colour_scheme=scale_fill_manual(values=c("#FDAF91FF","#00468BFF","#ED0000FF","#42B540FF","#0099B4FF","#925E9FFF","#AD002AFF"),name="Species"))

# Expression
h4 <- list(df=df_labels_degs,offset=2.2,width=0.12,colour_scheme=scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,name="Gene Expression"))

extra_heatmaps <- list(h1,h2,h3,h4)
plot <- ggtree_multiple_heatmaps(tree,starting_heatmap,extra_heatmaps)
plot
```


```{r Panfungal-SITs}
# Load Tree
panfungal_tree <- read.tree("../results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/hits_1e-20_longest.aln.fasttree.2.2.11.tree") %>% midpoint()

# Tree Plot Function
ggtree_circular <- function(tree){
  ggtree(tree,layout="circular") #+
    #geom_tippoint(mapping = aes(color = Strain),na.rm=TRUE) +
    #scale_color_nejm(na.value = NA)# +
    #scale_color_discrete() 
}

# Assign Information
panfungal_tree_df <- as_tibble(panfungal_tree) %>% 
  mutate(Strain=ifelse(grepl("B9J08",label),"C_auris",
                ifelse(grepl("CJI96",label),"C_auris",
                ifelse(grepl("CJI97",label),"C_auris",
                ifelse(grepl("CJJ09",label),"C_auris",
                ifelse(grepl("FDK38",label),"C_auris",
                ifelse(grepl("QG37",label),"C_auris",
                ifelse(grepl("CJJ07",label),"C_auris",
                ifelse(grepl("CXQ85",label),"C_haemulonii",
                ifelse(grepl("CXQ87",label),"C_duobushaemulonii",
                ifelse(grepl("C7M61",label),"C_pseudohaemulonii",
                ifelse(grepl("CAWG_05897",label),"C_albicans",
                ifelse(grepl("C2_08050C",label),"C_albicans",NA))))))))))))) #%>% 
  #mutate(Danger=ifelse(grepl("C_",Strain),"Yes",NA)) %>% 
  #mutate(value=ifelse(grepl("C_",Strain),0.5,NA))
#panfungal_tree_tree <- as.treedata(panfungal_tree_df)
#p <- ggtree_circular(panfungal_tree_tree) 

```

```{bash Clean-Data,eval=F}
cd ~/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits
cat hits_1e-20_longest.netgpi1.1.tsv | grep -v "^#" > hits_1e-20_longest.netgpi1.1.clean.tsv
cat hits_1e-20_longest.signalP5.tsv | grep -v "^#" > hits_1e-20_longest.signalP5.clean.tsv
cat hits_1e-20_longest.deepTMHMM.gff3  | grep "Number of predicted TMRs" | sed 's/# //g' | sed 's/ Number of predicted TMRs:/\t/g' | sort | uniq > hits_1e-20_longest.deepTMHMM.clean.tsv

cd ../backup/3.pfam_hmmscan_fungidb_XTC_results_2024_08_14
grep -v "^#" hmm_per_domain_hits_table > hmm_per_domain_hits_table_manually_ok
# Edit this file so it's only correct length genes

awk '{sub(/^.{21}/, "&\t"); sub(/^.{33}/, "&\t"); sub(/^.{40}/, "&\t"); sub(/^.{62}/, "&\t"); sub(/^.{74}/, "&\t"); sub(/^.{81}/, "&\t"); sub(/^.{92}/, "&\t"); sub(/^.{100}/, "&\t"); sub(/^.{107}/, "&\t"); sub(/^.{112}/, "&\t"); sub(/^.{117}/, "&\t"); sub(/^.{128}/, "&\t"); sub(/^.{139}/, "&\t"); sub(/^.{147}/, "&\t"); sub(/^.{154}/, "&\t"); sub(/^.{161}/, "&\t"); sub(/^.{168}/, "&\t"); sub(/^.{175}/, "&\t"); sub(/^.{182}/, "&\t"); sub(/^.{189}/, "&\t"); sub(/^.{196}/, "&\t"); sub(/^.{202}/, "&\t")} 1' hmm_per_domain_hits_table_manually_ok > hmm_per_domain_hits_table_manually_ok.tsv
# Upload this as below

# Manually edit selected lines where transcript is too long
# Move the dash for the next column further
# Had to work out 4th argument needs to be 72, thus change all with xlsx spreadsheet
awk '{sub(/^.{21}/, "&\t"); sub(/^.{33}/, "&\t"); sub(/^.{40}/, "&\t"); sub(/^.{72}/, "&\t"); sub(/^.{84}/, "&\t"); sub(/^.{91}/, "&\t"); sub(/^.{102}/, "&\t"); sub(/^.{110}/, "&\t"); sub(/^.{117}/, "&\t"); sub(/^.{122}/, "&\t"); sub(/^.{127}/, "&\t"); sub(/^.{138}/, "&\t"); sub(/^.{149}/, "&\t"); sub(/^.{157}/, "&\t"); sub(/^.{164}/, "&\t"); sub(/^.{171}/, "&\t"); sub(/^.{178}/, "&\t"); sub(/^.{185}/, "&\t"); sub(/^.{192}/, "&\t"); sub(/^.{199}/, "&\t"); sub(/^.{206}/, "&\t"); sub(/^.{212}/, "&\t")} 1' hmm_per_domain_hits_edited_manually_too_long_transcript_names_fixed > hmm_per_domain_hits_edited_manually_too_long_transcript_names_fixed.tsv


```


```{r Annotate-Panfungal-SITs}
# GPI - just 2
pf_gpi <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/hits_1e-20_longest.netgpi1.1.clean.tsv",col_names = F)
colnames(pf_gpi) <- c("label","Length","Pred_GPI_anchored","Omega_site_position","Likelihood","Amino_acid") 
pf_gpi <- pf_gpi %>% 
  mutate(Feature=paste("NetGPI:",Pred_GPI_anchored)) %>% select(label,Feature) %>% 
  filter(grepl("GPI: GPI",Feature))

# SignalP
pf_sp5 <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/hits_1e-20_longest.signalP5.clean.tsv",col_names = F)
colnames(pf_sp5) <- c("label","Prediction","SP_sec_spi","Other","CS_position")
pf_sp5 <- pf_sp5 %>% 
  mutate(Feature=paste("SignalP5:",Prediction)) %>% select(label,Feature) %>% 
  filter(grepl("SP",Feature))

pf_dtm <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/hits_1e-20_longest.deepTMHMM.clean.tsv",col_names = F)
colnames(pf_dtm) <- c("label","Number_TM_domains")
#df_dtm <- df_dtm %>% 
#  mutate(Feature=paste("No. Transmembrane Domains:",Number_TM_domains)) #%>% select(Locus_id,Feature)

pf_annotations <- rbind(pf_sp5,pf_gpi)

# Deleted the ones that are too long
pfam_colnames <-  c("TargetName","TargetAccession","TargetLength","QueryName","QueryAccession","QueryLength","E-value","Score","Bias","DomainNumber","DomainNumberOf","DomainC-Evalue","Domaini-Evalue","DomainScore","DomainBias","HMMCoordFrom","HMMCoordTo","AliCoordFrom","AliCoordTo","EnvCoordFrom","EnvCoordTo","Acc","DescriptionTarget")

pf_pfam1 <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/backup/3.pfam_hmmscan_fungidb_XTC_results_2024_08_14/hmm_per_domain_hits_table_manually_ok.tsv",col_names = F)
colnames(pf_pfam1) <- pfam_colnames

pf_pfam2 <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/backup/3.pfam_hmmscan_fungidb_XTC_results_2024_08_14/hmm_per_domain_hits_edited_manually_too_long_transcript_names_fixed.tsv",col_names = F)
colnames(pf_pfam2) <- pfam_colnames
  
# Exclude those with lower likelihood
pf_pfam_filter <- rbind(pf_pfam1,pf_pfam2) %>% filter(`E-value`<=1e-5) %>% 
  unique() %>% mutate(DescriptionTarget=paste(TargetAccession,DescriptionTarget))

x <- pf_pfam_filter %>% select(QueryName,DescriptionTarget) %>% unique() %>%  group_by(DescriptionTarget) %>% summarise(Number=n())

list_of_targets_over_1 <- x %>% filter(Number>5) %>% select(DescriptionTarget)

pf_pfam_top <- pf_pfam_filter %>% select(QueryName,DescriptionTarget) %>%  
  filter(DescriptionTarget%in%list_of_targets_over_1$DescriptionTarget) %>% 
  rename(label=QueryName) %>% unique()
# Replace the last sugar group
#pf_pfam_top$DescriptionTarget[pf_pfam_top$DescriptionTarget=="MFS/sugar transport protein"] <- "Sugar (and other) transporter"

pf_pfam_top %>% count(DescriptionTarget)
pf_pfam_top_table <- pf_pfam_top %>% distinct() %>% 
  pivot_wider(names_from = DescriptionTarget,values_from = DescriptionTarget)
```


```{r Panfungal-KEGGs}
pf_kegg <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/hits_1e-20_longest.kegg.tsv",col_names = F)
colnames(pf_kegg) <- c("label","K1","KEGG","x1","x2","x3")
pf_kegg_simple <- pf_kegg %>% filter(!is.na(K1)) %>% mutate(Kegg_term=paste(K1,KEGG)) %>% 
  select(label,KEGG,Kegg_term)
```

```{r Panfungal-GO}
pf_go <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/hits_1e-20_longest.fasta-diamond.processed.tab") 
pf_go_simple <- pf_go %>% rename(label=`#gene_id`,
                                 GO_term=`GO-term`) %>% select(label,GO_term)
pf_go %>% select(gene_name) %>% distinct()
# These annotations are based on 23 proteins

pf_go_simple %>% select(GO_term) %>% distinct() #%>% write_tsv("../results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/hits_1e-20_longest.fasta-diamond.processed.tab.GO_list.txt")

a <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/Revigo_BP_Scatterplot.tsv") %>% mutate(Type="BP")
b <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/Revigo_MF_Scatterplot.tsv") %>% mutate(Type="MF")
c <- read_tsv("/Users/hughgifford/Dropbox/phd/writing/auris_killifish/results/blast/fungidb_C_albicans_SIT1_2024_08_01/3.annotations_for_SIT_hits/Revigo_CC_Scatterplot.tsv") %>% mutate(Type="CC")
pf_go_lookup <- rbind(a,b,c) %>% mutate(Full_GO_term=paste(TermID,Name)) %>% 
  rename(GO_term=TermID) %>% select(GO_term,Full_GO_term)

pf_go_named_list <- left_join(pf_go_simple,pf_go_lookup,by="GO_term") %>% select(-c(GO_term)) %>% distinct() #

pf_go_count <- pf_go_named_list %>% group_by(Full_GO_term) %>% summarise(Number=n())

pf_go_named <- pf_go_named_list %>% 
  pivot_wider(names_from = Full_GO_term,values_from = Full_GO_term)

# What else is there?
what <- pf_go_named %>% filter(is.na(`GO:0015343 siderophore-iron transmembrane transporter activity`)) %>% filter(is.na(`GO:1904334 heme import across plasma membrane`))
```


```{r Plot}
panfungal_tree_df_use <- left_join(panfungal_tree_df,pf_dtm,by="label") %>% 
  #left_join(.,pf_annotations,by="label") %>% 
  left_join(.,pf_pfam_top_table,by="label") %>% 
  left_join(.,pf_kegg_simple,by="label") %>% 
  left_join(.,pf_go_named,by="label") %>% 
  mutate(GO_term_column=coalesce(`GO:0033214 siderophore-dependent iron import into cell`,`GO:1904334 heme import across plasma membrane`))
p <- ggtree(as.treedata(panfungal_tree_df_use),layout = "circular")
p %<+% panfungal_tree_df_use
pwidth_var <- 0.07
p <- p + 
  geom_treescale(#x=0, y=0, 
                #width=0.1, color='black'
    ) +
      geom_fruit(geom = geom_tile,
             mapping = aes(y=label, fill=Strain),
             pwidth = pwidth_var) +
  geom_fruit(geom = geom_col,
             mapping = aes(x=Number_TM_domains, y=label,colour=Number_TM_domains),
             pwidth = 0.14,
             axis.params = list(
               axis = 'x',
               text.size = 2,
               nbreak = 14, 
               text.angle = -40, 
               vjust = 1, 
               hjust = 0,
               limits = c(0, 28)), 
             grid.params = list()) +
  scale_color_viridis_c(direction = -1) +
      geom_fruit(geom = geom_tile,
             mapping = aes(y=label, fill=`PF07690.20 Major Facilitator Superfamily`),
             pwidth = pwidth_var) +
        geom_fruit(geom = geom_tile,
             mapping = aes(y=label, fill=`PF06609.17 Fungal trichothecene efflux pump (TRI12)`),
             pwidth = pwidth_var) +
        geom_fruit(geom = geom_tile,
             mapping = aes(y=label, fill=`PF00083.28 Sugar (and other) transporter`),
             pwidth = pwidth_var) +
          geom_fruit(geom = geom_tile,
             mapping = aes(y=label, fill=`PF03137.24 Organic Anion Transporter Polypeptide (OATP) family`),
             pwidth = pwidth_var) +
          geom_fruit(geom = geom_tile,
             mapping = aes(y=label, fill=Kegg_term),
             pwidth = pwidth_var) +
        geom_fruit(geom = geom_tile,
             mapping = aes(y=label, fill=GO_term_column),
             pwidth = pwidth_var) +
  # GPI, SP5
      #geom_fruit(geom = geom_tile,
      #       mapping = aes(y=label, fill=Feature),
      #       pwidth = pwidth_var) +

  scale_fill_manual(values = c("#FFDC91FF","#E18727FF","#0099B4FF","#0072B5FF","#6F99ADFF",
                               "#1B1919FF","#BC3C29FF",
                               "#ADB6B6FF","#20854EFF",
                               "#42B540FF","#925E9FFF",
                               "#EE4C97FF","#7876B1FF",
                               "#FDAF91FF","#00468BFF","#ED0000FF"),na.translate = FALSE)

# Create space
p <- open_tree(p, angle=45) 
p <- p %>% rotate_tree(90)
p
#pal_lancet()(9)
#pal_nejm()(8)
ggsave(p,file="../figures/phylo_panfungal_sit1_v1_2024_09_12.pdf",dev=cairo_pdf(),height=15,width=15)
```

# SIT Network

```{r fig.height=10,fig.width=10}
# Load gene names
df_cgd_names <- read_csv("../data/C_auris_unique_gene_name.csv") %>% select(gene,unique_name) %>% 
  rename(Locus_id=gene,CGD_name=unique_name)
# Function to edit names
require(string)
modify_cells <- function(x) {
  x <- ifelse(str_detect(x, "^[0-9]"), paste0("HP_", x), x)
  x <- str_replace(x, "(_[^_]+_)", "_")
  return(x)
}
# Apply function to entire dataframe
df_cgd_names_modified <- df_cgd_names %>% mutate(across(everything(), modify_cells))

# Load normalised data
#ak_fpkm <- read_tsv("/Users/hughgifford/Dropbox/phd/laboratory/methods/328-pca/15_fish_seq_ncbi_genes.FPKM",
#                    col_names = F)
#colnames(ak_fpkm) <- c("Condition","Locus_id","FPKM") 

# Filter for DEGs in infection
#list_degs_ak_infection <- ak_logfc_infection %>% filter(DEG!="No") %>% #select(Locus_id) %>% unique()

#ak_fpkm_infection_only <- ak_fpkm %>% 
#  filter(Locus_id %in% list_degs_ak_infection$Locus_id) %>% 
#  filter(!grepl("None",Condition)) %>% 
#  filter(!grepl("Water",Condition)) %>% 
#  pivot_wider(names_from = Condition, values_from = FPKM, values_fill = list(FPKM=0)) #%>% 
#  column_to_rownames(var="Locus_id") #%>% 

# DEGs for C. auris - excluding ypd
df_auris_fpkm_core <- read_tsv("../data/C_auris_FPKM.tsv") %>% 
  rename(Locus_id="gene") %>% 
  #filter(!grepl("ypd",condition))
  left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name)
# There were NAs
# GO back to file and rename 5589 and 5590
#df_auris_fpkm_core %>% filter(is.na(CGD_name))

fkpm_all_long <- read_csv(file="../data/C_auris_RNA-seq-systematic-review.csv") %>% 
  select(-c(expt)) %>% rename(Locus_id=gene) %>% 
    left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name)

mt_auris_fpkm <- df_auris_fpkm_core %>% 
  rename(Clade=clade,Timepoint=timepoint,Repeat=`repeat`,FPKM=fpkm,Condition=condition) %>% 
  select(-c(Clade,Timepoint,Repeat)) %>% 
  pivot_wider(names_from = Condition, values_from = FPKM, values_fill = 0) %>% 
  column_to_rownames(var="Locus_id")

#host_path_matrix <- rbind(ak_fpkm_infection_only,mt_auris_fpkm)

#mt_corr <- cor(t(host_path_matrix))

mt_corr <- cor(t(mt_auris_fpkm))

# Load graphical packages


correlation_matrix <- mt_corr

# Filter for significant correlations
threshold <- 0.85
significant_correlations <- mt_corr * (abs(mt_corr) >= threshold)

# Convert to an edge list
edges <- melt(significant_correlations)
edges <- edges[edges$value != 0 & edges$Var1 != edges$Var2, ]

# Genes of interest
b8441_v2_sit1_list <- c("SIT1_1499","SIT1_2110","SIT1_1948","SIT1_3908","SIT1_4474","SIT1_4475","SIT1_2581","SIT1_0002","SIT1_1519","SIT1_2465","SIT1_4097","SIT1_1487","SIT1_3921","SIT1_1521","SIT1_1547","SIT1_2241","SIT1_1542","SIT1_3908","SIT1_4474","SIT1_4475","SIT1_0002","SIT1_2581") 

edges <- edges %>% filter(Var1 %in% b8441_v2_sit1_list)

# Create the network object
graph <- graph_from_data_frame(edges, directed = FALSE)

# Visualize the network
ggraph(graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = abs(value), edge_width = abs(value)), color = "blue") +
  geom_node_point(color = "red", size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() +
  ggtitle("Gene Correlation Network")
```
```{r Network-of-RNA-seq,fig.height=10,fig.width=10}
mt_auris_fpkm_rna_seq <- fkpm_all_long %>% 
  pivot_wider(names_from = condition, values_from = fpkm, values_fill = 0) %>% 
  column_to_rownames(var="Locus_id")

#host_path_matrix <- rbind(ak_fpkm_infection_only,mt_auris_fpkm)

#mt_corr <- cor(t(host_path_matrix))

mt_corr <- cor(t(mt_auris_fpkm_rna_seq))
mt_corr <- cor(t(mt_auris_fpkm))

correlation_matrix <- mt_corr

# Filter for significant correlations
threshold <- 0.85
significant_correlations <- mt_corr * (abs(mt_corr) >= threshold)

# Convert to an edge list
edges <- melt(significant_correlations)
edges0 <- edges[edges$value != 0 & edges$Var1 != edges$Var2, ]

# Genes of interest
b8441_v2_sit1_list <- c("SIT1_1499","SIT1_2110","SIT1_1948","SIT1_3908","SIT1_4474","SIT1_4475","SIT1_2581","SIT1_0002","SIT1_1519","SIT1_2465","SIT1_4097","SIT1_1487","SIT1_3921","SIT1_1521","SIT1_1547","SIT1_1548","SIT1_2241","SIT1_1542") 

edges1 <- edges0 %>% filter(Var1 %in% b8441_v2_sit1_list)
matches <- edges1$Var2 %>% as.character()

# Create the network object
graph <- graph_from_data_frame(edges1, directed = FALSE)

# Visualize the network
p <- ggraph(graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = abs(value), edge_width = abs(value)), color = "#2A6EBBFF" ) +
  geom_node_point(color = "#F0AB00FF", size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() #+
  #ggtitle("Gene Correlation Network")
p
#pal_bmj()(2)
#ggsave(plot=p,file="../figures/network_sit_rna_v0_2024_09_12.pdf",dev=cairo_pdf(),height=10,width = 10)

# Get hold of negative values
terms <- b8441_v2_sit1_list 
m <- mt_corr[terms,matches]
# Strangely duplicated rows
m1 <- m[1:17,]
m2 <- melt(m1) %>% mutate(absvalue=abs(value)) 
m3 <- m2 %>% filter(absvalue>=0.85)
# All correlations are positive

# Are these SIT1_2110s all... zero?
mt_auris_fpkm_rna_seq["SIT1_2110",]
```

```{r Show-SIT1-and-other-genes-as-heatmap,fig.height=10,fig.width=10}
df_degs_core_time <- read_tsv("../data/C_auris_DEGS_timepoints.tsv") %>% # Load DEGs
  rename(Locus_id=Gene) %>% # Rename column
  filter(Reference=="Core") %>% 
  left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name)#%>% # Select reference specific

# Add interclade genes

df_degs_core_inter <- read_tsv("../data/C_auris_DEGS_interclades.tsv") %>% # Load DEGs
  rename(Locus_id=Gene) %>% # Rename column
  filter(Reference=="Core") %>% 
  left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name)#%>% # Select reference specific

df_degs_core <- rbind(df_degs_core_inter,df_degs_core_time)

mt_degs_core <- df_degs_core %>% 
  mutate(Clade_comparison=paste(Clade,Comparison)) %>% 
  select(Clade_comparison,Locus_id,Log_FC) %>% 
  pivot_wider(names_from = Locus_id,values_from = Log_FC,values_fill = 0) %>% 
  column_to_rownames(var="Clade_comparison")

matches_and_terms <- c(terms,matches)
#mt_degs_sit <- mt_degs_core[,matches_and_terms]

# Select only rows of interest
rows_of_interest_in_order <- c("I 24h vs ypd","II 24h vs ypd","III 24h vs ypd","IV 24h vs ypd","V 24h vs ypd","I 48h vs 24h","II 48h vs 24h","III 48h vs 24h","IV 48h vs 24h","V 48h vs 24h","I 48h vs ypd","II 48h vs ypd","III 48h vs ypd","IV 48h vs ypd","V 48h vs ypd","I vs II 24h","I vs II 48h","I vs II ypd","I vs III 24h","I vs III 48h","I vs III ypd","IV vs II 24h","IV vs II 48h","IV vs II ypd","IV vs III 24h","IV vs III 48h","IV vs III ypd","V vs I 24h","V vs I 48h","V vs I ypd","V vs II 24h","V vs II 48h","V vs II ypd","V vs III 24h","V vs III 48h","V vs III ypd","V vs IV 24h","V vs IV 48h","V vs IV ypd")
mt_degs_sit <- mt_degs_core[rows_of_interest_in_order,terms]

select_heatmap_ca <- function(terms){
  matrix <- mt_degs_core[rows_of_interest_in_order,terms]
ComplexHeatmap::Heatmap(t(matrix),
                        column_order = rows_of_interest_in_order)
}

rownames(mt_degs_core)

select_heatmap_ca(mt_degs_sit)

#save_pdf(p,file="testCHEESE.pdf",height=10,width = 10)

df_features_collapse <- df_features_input %>% unique() %>% group_by(Locus_id) %>% summarise(Features=paste(Feature,collapse=";")) %>% 
  filter(grepl("B9J08",Locus_id)) %>% 
  left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name) #

df_features_sit_net <- df_features_collapse %>% 
  filter(Locus_id %in% matches_and_terms) %>% select(Locus_id,Features)

ferr <- df_features_collapse %>% filter(grepl("Ferr|Heme|Iron",Features),ignore.case=TRUE) %>% select(Locus_id) %>% as_vector()

ferr_terms <- c(terms,ferr)

select_heatmap_ca(terms)
```

```{r}
require(tidyverse)

# Clade I reference (version 2)
df <- read_tsv("../metadata/refs/Candida_auris_clade_I_B8441_V2_GCA_002759435_reformat/Candida_auris_clade_I_B8441_V2_GCA_002759435_reformat.annotation.gff3.synima-parsed.GFF3",col_names = F) %>% select(X1,X4,X5,X7,X9)
colnames(df) <- c("Contig","Start","End","Strand","Locus_id")

# Order by contig - from Orthofinder/Synima
df$Contig <- factor(df$Contig, levels=c("PEKT02000004.1","PEKT02000007.1","PEKT02000014.1","PEKT02000001.1","PEKT02000002.1","PEKT02000005.1","PEKT02000003.1","PEKT02000010.1","PEKT02000013.1","PEKT02000009.1","PEKT02000011.1","PEKT02000008.1","PEKT02000012.1","PEKT02000006.1","PEKT02000015.1"))

# Siderophore transporter list - from CGD
siderophore_list <- c("B9J08_001499","B9J08_002110","B9J08_001948","B9J08_003908","B9J08_004474","B9J08_004475","B9J08_002581","B9J08_000002","B9J08_001519","B9J08_002465","B9J08_004097","B9J08_001487","B9J08_003921","B9J08_001521","B9J08_001547","B9J08_001548","B9J08_002241","B9J08_001542")

# Siderophore tranporter subset
df_sits <- df %>% filter(Locus_id %in% siderophore_list)

# Arrange
df_sits <- df_sits %>% arrange(Contig,Start)

# Clade I reference (version 3)
df_v3 <- read_tsv("../metadata/refs/Candida_auris_clade_I_B8441_V3_GCA_002759435.3_reformat/Candida_auris_clade_I_B8441_V3_GCA_002759435.3_reformat.annotation.gff3",col_names = F,skip = 7) %>% select(X1,X4,X5,X7,X9)
colnames(df_v3) <- c("Contig","Start","End","Strand","Locus_id")
df_v3 <- df_v3 %>% filter(grepl("old_locus_tag",Locus_id)) %>% 
  separate(Locus_id,into = c("New_locus_id","Locus_id"),sep=";old_locus_tag=") %>% 
  mutate(New_locus_id=gsub("ID=","",New_locus_id))

# Siderophore tranporter subset
df_v3_sits <- df_v3 %>% filter(Locus_id %in% siderophore_list)

# Add the names
haem_list <- c("B9J08_003908","B9J08_004474","B9J08_004475","B9J08_002581","B9J08_000002")
df_v3_sits_only <- df_v3_sits %>% filter(!Locus_id %in% haem_list) %>% 
  filter(Locus_id!="B9J08_001548") %>% 
  mutate(New_name=paste("XTC_",seq.int(1,12,1),sep="")) %>% 
  filter(New_name!="XTC_2")
df_v3_sits_a <- df_v3_sits %>% filter(Locus_id=="B9J08_001547") %>% 
    mutate(New_name="XTC_2A")
df_v3_sits_b <- df_v3_sits %>% filter(Locus_id=="B9J08_001548") %>% 
    mutate(New_name="XTC_2B")
df_v3_haem_only <- df_v3_sits %>% filter(Locus_id %in% haem_list) %>% 
  mutate(New_name=paste("HTR_",seq.int(1,5,1),sep=""))

new_sit_names <- rbind(df_v3_sits_only,df_v3_haem_only,df_v3_sits_a,df_v3_sits_b) %>% 
  arrange(New_locus_id) %>% 
  mutate(Genome_order = seq.int(1,18,1))

new_sit_names_lookup <- new_sit_names %>% select(Locus_id,Genome_order,New_name) %>% 
  mutate(SIT_name=gsub("B9J08_00","SIT1_",Locus_id)) %>% 
  mutate(Long_name=paste(New_name," (",SIT_name,")",sep=""))
```


```{r Create-SIT-Heatmap}
siderophore_list_SIT <- gsub("B9J08_00","SIT1_",siderophore_list)
new_sit_names_lookup_only <- new_sit_names_lookup %>% select(SIT_name,New_name,Long_name)
new_sit_names_lookup_order <- new_sit_names_lookup %>% select(Long_name) %>% as_vector()

just_sits_heatmap <- mt_degs_core[rows_of_interest_in_order,siderophore_list_SIT] %>% 
  as.data.frame() %>% t() %>% as.data.frame() %>% 
  rownames_to_column(var="SIT_name") %>% left_join(.,new_sit_names_lookup_only,by="SIT_name") %>% 
  select(-c(SIT_name,New_name)) %>% column_to_rownames(var="Long_name")

p <- Heatmap(just_sits_heatmap,
        column_order = rows_of_interest_in_order,
        row_order = new_sit_names_lookup_order)

#save_pdf(p,file="../figures/heatmap_sits_v0_2024_09_18.pdf")
```

