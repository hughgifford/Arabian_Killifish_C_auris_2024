# Figure 5

```{r Plot-ggtree-for-Candida-SIT1,fig.height=14,fig.width=14}
# Load Tree file
tree <- read.tree("data/sit.mfa.raxml.bestTree.tree")

# Obtain tip labels
labels <- data_frame(tree$tip.label) %>% rename(Locus_id=`tree$tip.label`) 

# Obtain feature info
features <- read_tsv("data/C_auris_features.tsv")

tbl_labels_features <- left_join(labels,features,by="Locus_id") %>% 
  filter(Feature!="SignalP5: OTHER") %>% 
  filter(!grepl("CGD",Feature)) %>% 
  filter(!grepl("Cluster",Feature)) %>% 
  filter(Feature!="NetGPI: Not GPI-Anchored") %>% 
  mutate(Present=1) %>% pivot_wider(names_from = Feature,values_from = Present, values_fill = list(Present=0)) %>% 
  mutate(Transmembrane_domains=as.character(
      (14*`No. Transmembrane Domains: 14`)+
      (13*`No. Transmembrane Domains: 13`)+
      (12*`No. Transmembrane Domains: 12`)+
      (11*`No. Transmembrane Domains: 11`)+
      #(10*`No. Transmembrane Domains: 10`)+
      (9*`No. Transmembrane Domains: 9`)+
      #(8*`No. Transmembrane Domains: 8`)+
      #(7*`No. Transmembrane Domains: 7`)+
      (6*`No. Transmembrane Domains: 6`))) %>% 
      #(4*`No. Transmembrane Domains: 4`)+
      #(3*`No. Transmembrane Domains: 3`)+
      #(2*`No. Transmembrane Domains: 2`)+
      #(1*`No. Transmembrane Domains: 1`)
  select(-c(`No. Transmembrane Domains: 14`,`No. Transmembrane Domains: 13`,`No. Transmembrane Domains: 12`,`No. Transmembrane Domains: 11`,`No. Transmembrane Domains: 9`,`No. Transmembrane Domains: 6`)) %>% column_to_rownames(var="Locus_id") 

ggtree_Candida_SIT1 <- function(tree,genotype){
  gheatmap(ggtree(midpoint(tree)), # Midpoint rooted tree
  
  # Heatmap Options
                 tbl_labels_features, # Add heatmap
                 offset=0.45, # Offset the tip labels from the heatmap
                 width=1, # Give the heatmap a reasonable width
                 font.size=2.5, # This formula seems to work for angled names at the top
                 colnames_angle=45, 
                 colnames_position="top",
                 hjust=0, 
                 colnames_offset_y = 0,
                 colnames_offset_x = 0) +
  coord_cartesian(clip = 'off') + # This function ensures edges aren't clipped
  theme_tree(plot.margin=margin(165, 0, 0, 0)) + # This ensures top labels are seen
  scale_fill_lancet(name="Legend") + # Colours for heatmap, and name for legend!
  
  # Tree options  
  geom_tiplab(size=2.5, align=TRUE, linesize=.5, hjust=0) + # Align Tiplabels
  geom_treescale(x=0, y=0, width=0.1, color='black') + # Treescale
  geom_rootedge(rootedge=0.01) # Give root edge
}

ggtree_multiple_heatmaps <- function(tree,starting_heatmap,extra_heatmaps){
  
  # Produce starting tree with heatmap
  plot <- gheatmap(ggtree(midpoint(tree)), # Midpoint rooted tree
  
  # Heatmap Options
                 starting_heatmap$df, # Add heatmap
                 offset=starting_heatmap$offset, # Offset the tip labels from the heatmap
                 width=starting_heatmap$width, # Give the heatmap a reasonable width
                 font.size=2.5, hjust=0,  # This formula seems to work for angled names at the top
                 colnames_angle=45, colnames_position="top", colnames_offset_y = 0, colnames_offset_x = 0) +
  coord_cartesian(clip = 'off') + # This function ensures edges aren't clipped
  theme_tree(plot.margin=margin(165, 0, 0, 0)) + # This ensures top labels are seen
  starting_heatmap$colour_scheme + # Colours for heatmap, and name for legend!
  
  # Tree options  
  geom_tiplab(size=2.5, align=TRUE, linesize=.5, hjust=0) + # Align Tiplabels
  geom_treescale(x=0, y=0, width=0.1, color='black') + # Treescale
  geom_rootedge(rootedge=0.01) # Give root edge
  
  # Loop through the extra heatmaps
  for(i in seq_along(extra_heatmaps)){ # sequence along to get hold of each heatmap
    extra_heatmap <- extra_heatmaps[[i]] # Assign each heatmap
    plot <- plot + new_scale_fill() # Prepare the original plot
    plot <- gheatmap(plot, extra_heatmap$df, offset=extra_heatmap$offset, width=extra_heatmap$width,
                     font.size=2.5, hjust=0, 
                     colnames_angle=45, colnames_position="top",colnames_offset_y = 0, colnames_offset_x = 0) + 
      extra_heatmap$colour_scheme
  }
  plot
}

# Dataset
species <- read_csv("data/species.csv")

tbl_labels_Candida <- labels %>% rowwise() %>%
  mutate(Species = species$Species[which(str_detect(Locus_id, species$Pattern_in_locus_id))[1]]) %>%
  ungroup() %>% column_to_rownames(var="Locus_id") 

# Sample usage
starting_heatmap <- list(df = tbl_labels_features,offset=0.45,width=1,colour_scheme=scale_fill_lancet())
h1 <- list(df=tbl_labels_Candida,offset=4,width=0.04,colour_scheme=scale_fill_lancet(name="Species"))
extra_heatmaps <- list(h1)
ggtree_multiple_heatmaps(tree,starting_heatmap,extra_heatmaps)

tbl_select_features <- tbl_labels_features %>% select(`GO:0033214: siderophore-dependent iron import into cell`,`GO:1904334: heme import across plasma membrane`,`K08197: ARN; MFS transporter, SIT family, siderophore-iron:H+ symporter`,`PF07690.20: MFS_1: Major Facilitator Superfamily`,`PF06609.17: TRI12: Fungal trichothecene efflux pump (TRI12)`,`NetGPI: GPI-Anchored`,`SignalP5: SP(Sec/SPI)`)# %>% as.character()
tbl_select_features[tbl_select_features==0] <- "Absent"
tbl_select_features[tbl_select_features==1] <- "Present"
# Unsure why but this doesn't reorder the legend
tbl_select_features <- tbl_select_features %>% mutate(across(everything(), ~ factor(.x, levels = c("Present", "Absent"))))

# Transmembrane domain numbers
tbl_tm <- tbl_labels_features %>% select(Transmembrane_domains)
tbl_tm$Transmembrane_domains <- as.numeric(tbl_tm$Transmembrane_domains)

# Clusters
tbl_clusters <- left_join(labels,features,by="Locus_id") %>% 
  filter(grepl("Cluster",Feature)) %>% 
  rename(`Orthofinder Cluster Assignment`=Feature) %>% 
  column_to_rownames(var="Locus_id")

# Heatmap of expression
df_degs_input <- read_tsv("data/C_auris_DEGS_timepoints.tsv") %>% # Load DEGs
  rename(Locus_id=Gene) %>% # Rename column
  filter(Clade=="I"|Reference=="Specific") %>% # Select reference specific
  select(-c(Reference,Clade,DEG,FDR))

df_labels_degs <- left_join(labels,df_degs_input,by="Locus_id") %>% 
  pivot_wider(names_from = Comparison,values_from = Log_FC, values_fill = list(Log_FC=0)) %>% select(-c(`NA`)) %>% 
  column_to_rownames(var="Locus_id")

# Generate plot

# Features
starting_heatmap <- list(df = tbl_select_features,offset=0.5,width=0.32,colour_scheme=scale_fill_manual(values=c("lightgrey","black"),name="Present/Absent"))

# TM
h1 <- list(df=tbl_tm,offset=1.6,width=0.04,colour_scheme=scale_fill_viridis_c(name="No. TM Domains"))

# Cluster
h2 <- list(df=tbl_clusters,offset=1.8,width=0.04,colour_scheme=scale_fill_nejm(name="Orthofinder Cluster Assignment"))

# Species
h3 <- list(df=tbl_labels_Candida,offset=2.0,width=0.04,colour_scheme=scale_fill_manual(values=c("#FDAF91FF","#00468BFF","#ED0000FF","#42B540FF","#0099B4FF","#925E9FFF","#AD002AFF"),name="Species"))

# Expression
h4 <- list(df=df_labels_degs,offset=2.2,width=0.12,colour_scheme=scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,name="Gene Expression"))

extra_heatmaps <- list(h1,h2,h3,h4)
plot <- ggtree_multiple_heatmaps(tree,starting_heatmap,extra_heatmaps)
plot
```



```{r SIT-Network,fig.height=10,fig.width=10}
# Load gene names
df_cgd_names <- read_csv("data/C_auris_unique_gene_name.csv") %>% select(gene,unique_name) %>% 
  rename(Locus_id=gene,CGD_name=unique_name)

#list_degs_ak_infection <- ak_logfc_infection %>% filter(DEG!="No") %>% #select(Locus_id) %>% unique()

#ak_fpkm_infection_only <- ak_fpkm %>% 
#  filter(Locus_id %in% list_degs_ak_infection$Locus_id) %>% 
#  filter(!grepl("None",Condition)) %>% 
#  filter(!grepl("Water",Condition)) %>% 
#  pivot_wider(names_from = Condition, values_from = FPKM, values_fill = list(FPKM=0)) #%>% 
#  column_to_rownames(var="Locus_id") #%>% 

# DEGs for C. auris - excluding ypd
df_auris_fpkm_core <- read_tsv("data/C_auris_FPKM.tsv") %>% 
  rename(Locus_id="gene") %>% 
  #filter(!grepl("ypd",condition))
  left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name)
# There were NAs
# GO back to file and rename 5589 and 5590
#df_auris_fpkm_core %>% filter(is.na(CGD_name))

mt_auris_fpkm <- df_auris_fpkm_core %>% 
  rename(Clade=clade,Timepoint=timepoint,Repeat=`repeat`,FPKM=fpkm,Condition=condition) %>% 
  select(-c(Clade,Timepoint,Repeat)) %>% 
  pivot_wider(names_from = Condition, values_from = FPKM, values_fill = 0) %>% 
  column_to_rownames(var="Locus_id")

#host_path_matrix <- rbind(ak_fpkm_infection_only,mt_auris_fpkm)

#mt_corr <- cor(t(host_path_matrix))

mt_corr <- cor(t(mt_auris_fpkm))

# Load graphical packages


correlation_matrix <- mt_corr

# Filter for significant correlations
threshold <- 0.85
significant_correlations <- mt_corr * (abs(mt_corr) >= threshold)

# Convert to an edge list
edges <- melt(significant_correlations)
edges <- edges[edges$value != 0 & edges$Var1 != edges$Var2, ]

# Genes of interest
b8441_v2_sit1_list <- c("SIT1_1499","SIT1_2110","SIT1_1948","SIT1_3908","SIT1_4474","SIT1_4475","SIT1_2581","SIT1_0002","SIT1_1519","SIT1_2465","SIT1_4097","SIT1_1487","SIT1_3921","SIT1_1521","SIT1_1547","SIT1_2241","SIT1_1542","SIT1_3908","SIT1_4474","SIT1_4475","SIT1_0002","SIT1_2581") 

edges <- edges %>% filter(Var1 %in% b8441_v2_sit1_list)

# Create the network object
graph <- graph_from_data_frame(edges, directed = FALSE)

# Visualize the network
ggraph(graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = abs(value), edge_width = abs(value)), color = "#2A6EBBFF" ) +
  geom_node_point(color = "#F0AB00FF", size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() +
  ggtitle("Gene Correlation Network")
```


```{r Network-from-RNA-seq-meta-analysis,fig.height=10,fig.width=10}
fkpm_all_long <- read_csv(file="data/C_auris_RNA-seq-systematic-review.csv") %>% 
  select(-c(expt)) %>% rename(Locus_id=gene) %>% 
    left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name)

mt_auris_fpkm_rna_seq <- fkpm_all_long %>% 
  pivot_wider(names_from = condition, values_from = fpkm, values_fill = 0) %>% 
  column_to_rownames(var="Locus_id")

mt_corr <- cor(t(mt_auris_fpkm_rna_seq))
#mt_corr <- cor(t(mt_auris_fpkm))

correlation_matrix <- mt_corr

# Filter for significant correlations
threshold <- 0.85
significant_correlations <- mt_corr * (abs(mt_corr) >= threshold)

# Convert to an edge list
edges <- melt(significant_correlations)
edges0 <- edges[edges$value != 0 & edges$Var1 != edges$Var2, ]

edges1 <- edges0 %>% filter(Var1 %in% b8441_v2_sit1_list)
matches <- edges1$Var2 %>% as.character()

# Create the network object
graph <- graph_from_data_frame(edges1, directed = FALSE)

# Visualize the network
p <- ggraph(graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = abs(value), edge_width = abs(value)), color = "#2A6EBBFF" ) +
  geom_node_point(color = "#F0AB00FF", size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() #+
  #ggtitle("Gene Correlation Network")
p
```

```{r Show-SIT1-and-other-genes-as-heatmap,fig.height=10,fig.width=10}
df_degs_core_time <- read_tsv("../data/C_auris_DEGS_timepoints.tsv") %>% # Load DEGs
  rename(Locus_id=Gene) %>% # Rename column
  filter(Reference=="Core") %>% 
  left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name)#%>% # Select reference specific

# Add interclade genes

df_degs_core_inter <- read_tsv("../data/C_auris_DEGS_interclades.tsv") %>% # Load DEGs
  rename(Locus_id=Gene) %>% # Rename column
  filter(Reference=="Core") %>% 
  left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name)#%>% # Select reference specific

df_degs_core <- rbind(df_degs_core_inter,df_degs_core_time)

mt_degs_core <- df_degs_core %>% 
  mutate(Clade_comparison=paste(Clade,Comparison)) %>% 
  select(Clade_comparison,Locus_id,Log_FC) %>% 
  pivot_wider(names_from = Locus_id,values_from = Log_FC,values_fill = 0) %>% 
  column_to_rownames(var="Clade_comparison")

matches_and_terms <- c(terms,matches)
#mt_degs_sit <- mt_degs_core[,matches_and_terms]

# Select only rows of interest
rows_of_interest_in_order <- c("I 24h vs ypd","II 24h vs ypd","III 24h vs ypd","IV 24h vs ypd","V 24h vs ypd","I 48h vs 24h","II 48h vs 24h","III 48h vs 24h","IV 48h vs 24h","V 48h vs 24h","I 48h vs ypd","II 48h vs ypd","III 48h vs ypd","IV 48h vs ypd","V 48h vs ypd","I vs II 24h","I vs II 48h","I vs II ypd","I vs III 24h","I vs III 48h","I vs III ypd","IV vs II 24h","IV vs II 48h","IV vs II ypd","IV vs III 24h","IV vs III 48h","IV vs III ypd","V vs I 24h","V vs I 48h","V vs I ypd","V vs II 24h","V vs II 48h","V vs II ypd","V vs III 24h","V vs III 48h","V vs III ypd","V vs IV 24h","V vs IV 48h","V vs IV ypd")
mt_degs_sit <- mt_degs_core[rows_of_interest_in_order,terms]

select_heatmap_ca <- function(terms){
  matrix <- mt_degs_core[rows_of_interest_in_order,terms]
ComplexHeatmap::Heatmap(t(matrix),
                        column_order = rows_of_interest_in_order)
}

rownames(mt_degs_core)

select_heatmap_ca(mt_degs_sit)

#save_pdf(p,file="testCHEESE.pdf",height=10,width = 10)

df_features_collapse <- df_features_input %>% unique() %>% group_by(Locus_id) %>% summarise(Features=paste(Feature,collapse=";")) %>% 
  filter(grepl("B9J08",Locus_id)) %>% 
  left_join(.,df_cgd_names_modified,by="Locus_id") %>% 
  select(-c(Locus_id)) %>% 
  rename(Locus_id=CGD_name) #

df_features_sit_net <- df_features_collapse %>% 
  filter(Locus_id %in% matches_and_terms) %>% select(Locus_id,Features)

ferr <- df_features_collapse %>% filter(grepl("Ferr|Heme|Iron",Features),ignore.case=TRUE) %>% select(Locus_id) %>% as_vector()

ferr_terms <- c(terms,ferr)

select_heatmap_ca(terms)
```

```{r}
require(tidyverse)

# Clade I reference (version 2)
df <- read_tsv("../metadata/refs/Candida_auris_clade_I_B8441_V2_GCA_002759435_reformat/Candida_auris_clade_I_B8441_V2_GCA_002759435_reformat.annotation.gff3.synima-parsed.GFF3",col_names = F) %>% select(X1,X4,X5,X7,X9)
colnames(df) <- c("Contig","Start","End","Strand","Locus_id")

# Order by contig - from Orthofinder/Synima
df$Contig <- factor(df$Contig, levels=c("PEKT02000004.1","PEKT02000007.1","PEKT02000014.1","PEKT02000001.1","PEKT02000002.1","PEKT02000005.1","PEKT02000003.1","PEKT02000010.1","PEKT02000013.1","PEKT02000009.1","PEKT02000011.1","PEKT02000008.1","PEKT02000012.1","PEKT02000006.1","PEKT02000015.1"))

# Siderophore transporter list - from CGD
siderophore_list <- c("B9J08_001499","B9J08_002110","B9J08_001948","B9J08_003908","B9J08_004474","B9J08_004475","B9J08_002581","B9J08_000002","B9J08_001519","B9J08_002465","B9J08_004097","B9J08_001487","B9J08_003921","B9J08_001521","B9J08_001547","B9J08_001548","B9J08_002241","B9J08_001542")

# Siderophore tranporter subset
df_sits <- df %>% filter(Locus_id %in% siderophore_list)

# Arrange
df_sits <- df_sits %>% arrange(Contig,Start)

# Clade I reference (version 3)
df_v3 <- read_tsv("../metadata/refs/Candida_auris_clade_I_B8441_V3_GCA_002759435.3_reformat/Candida_auris_clade_I_B8441_V3_GCA_002759435.3_reformat.annotation.gff3",col_names = F,skip = 7) %>% select(X1,X4,X5,X7,X9)
colnames(df_v3) <- c("Contig","Start","End","Strand","Locus_id")
df_v3 <- df_v3 %>% filter(grepl("old_locus_tag",Locus_id)) %>% 
  separate(Locus_id,into = c("New_locus_id","Locus_id"),sep=";old_locus_tag=") %>% 
  mutate(New_locus_id=gsub("ID=","",New_locus_id))

# Siderophore tranporter subset
df_v3_sits <- df_v3 %>% filter(Locus_id %in% siderophore_list)

# Add the names
haem_list <- c("B9J08_003908","B9J08_004474","B9J08_004475","B9J08_002581","B9J08_000002")
df_v3_sits_only <- df_v3_sits %>% filter(!Locus_id %in% haem_list) %>% 
  filter(Locus_id!="B9J08_001548") %>% 
  mutate(New_name=paste("XTC_",seq.int(1,12,1),sep="")) %>% 
  filter(New_name!="XTC_2")
df_v3_sits_a <- df_v3_sits %>% filter(Locus_id=="B9J08_001547") %>% 
    mutate(New_name="XTC_2A")
df_v3_sits_b <- df_v3_sits %>% filter(Locus_id=="B9J08_001548") %>% 
    mutate(New_name="XTC_2B")
df_v3_haem_only <- df_v3_sits %>% filter(Locus_id %in% haem_list) %>% 
  mutate(New_name=paste("HTR_",seq.int(1,5,1),sep=""))

new_sit_names <- rbind(df_v3_sits_only,df_v3_haem_only,df_v3_sits_a,df_v3_sits_b) %>% 
  arrange(New_locus_id) %>% 
  mutate(Genome_order = seq.int(1,18,1))

new_sit_names_lookup <- new_sit_names %>% select(Locus_id,Genome_order,New_name) %>% 
  mutate(SIT_name=gsub("B9J08_00","SIT1_",Locus_id)) %>% 
  mutate(Long_name=paste(New_name," (",SIT_name,")",sep=""))
```


```{r Create-SIT-Heatmap}
siderophore_list_SIT <- gsub("B9J08_00","SIT1_",siderophore_list)
new_sit_names_lookup_only <- new_sit_names_lookup %>% select(SIT_name,New_name,Long_name)
new_sit_names_lookup_order <- new_sit_names_lookup %>% select(Long_name) %>% as_vector()

just_sits_heatmap <- mt_degs_core[rows_of_interest_in_order,siderophore_list_SIT] %>% 
  as.data.frame() %>% t() %>% as.data.frame() %>% 
  rownames_to_column(var="SIT_name") %>% left_join(.,new_sit_names_lookup_only,by="SIT_name") %>% 
  select(-c(SIT_name,New_name)) %>% column_to_rownames(var="Long_name")

p <- Heatmap(just_sits_heatmap,
        column_order = rows_of_interest_in_order,
        row_order = new_sit_names_lookup_order)

#save_pdf(p,file="../figures/heatmap_sits_v0_2024_09_18.pdf")
```

